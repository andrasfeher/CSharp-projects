//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DQ_Manager {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AF_TESTDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AF_TESTDataSet : global::System.Data.DataSet {
        
        private DQ_BATCH_ERROR_DETAILSDataTable tableDQ_BATCH_ERROR_DETAILS;
        
        private DQ_BATCH_LOGDataTable tableDQ_BATCH_LOG;
        
        private DQ_BATCHESDataTable tableDQ_BATCHES;
        
        private DQ_BATCHES_FIELDSDataTable tableDQ_BATCHES_FIELDS;
        
        private DQ_CHECK_RESULTSDataTable tableDQ_CHECK_RESULTS;
        
        private DQ_DATABASESDataTable tableDQ_DATABASES;
        
        private DQ_FIELDSDataTable tableDQ_FIELDS;
        
        private DQ_TABLESDataTable tableDQ_TABLES;
        
        private mylogDataTable tablemylog;
        
        private V_DQ_BATCH_LEVEL_RESULTSDataTable tableV_DQ_BATCH_LEVEL_RESULTS;
        
        private V_DQ_FIELD_LEVEL_RESULTSDataTable tableV_DQ_FIELD_LEVEL_RESULTS;
        
        private V_DQ_MASTERDataTable tableV_DQ_MASTER;
        
        private global::System.Data.DataRelation relationFK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS;
        
        private global::System.Data.DataRelation relationFK_DQ_BATCH_LOG_DQ_BATCHES;
        
        private global::System.Data.DataRelation relationFK_BATCHES_FIELDS_BATCHES;
        
        private global::System.Data.DataRelation relationFK_BATCHES_FIELDS_FIELDS;
        
        private global::System.Data.DataRelation relationFK_STATISTICS_BATCHES;
        
        private global::System.Data.DataRelation relationFK_STATISTICS_FIELDS;
        
        private global::System.Data.DataRelation relationFK_FIELDS_TABLES;
        
        private global::System.Data.DataRelation relationFK_TABLES_DATABASES;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AF_TESTDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AF_TESTDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DQ_BATCH_ERROR_DETAILS"] != null)) {
                    base.Tables.Add(new DQ_BATCH_ERROR_DETAILSDataTable(ds.Tables["DQ_BATCH_ERROR_DETAILS"]));
                }
                if ((ds.Tables["DQ_BATCH_LOG"] != null)) {
                    base.Tables.Add(new DQ_BATCH_LOGDataTable(ds.Tables["DQ_BATCH_LOG"]));
                }
                if ((ds.Tables["DQ_BATCHES"] != null)) {
                    base.Tables.Add(new DQ_BATCHESDataTable(ds.Tables["DQ_BATCHES"]));
                }
                if ((ds.Tables["DQ_BATCHES_FIELDS"] != null)) {
                    base.Tables.Add(new DQ_BATCHES_FIELDSDataTable(ds.Tables["DQ_BATCHES_FIELDS"]));
                }
                if ((ds.Tables["DQ_CHECK_RESULTS"] != null)) {
                    base.Tables.Add(new DQ_CHECK_RESULTSDataTable(ds.Tables["DQ_CHECK_RESULTS"]));
                }
                if ((ds.Tables["DQ_DATABASES"] != null)) {
                    base.Tables.Add(new DQ_DATABASESDataTable(ds.Tables["DQ_DATABASES"]));
                }
                if ((ds.Tables["DQ_FIELDS"] != null)) {
                    base.Tables.Add(new DQ_FIELDSDataTable(ds.Tables["DQ_FIELDS"]));
                }
                if ((ds.Tables["DQ_TABLES"] != null)) {
                    base.Tables.Add(new DQ_TABLESDataTable(ds.Tables["DQ_TABLES"]));
                }
                if ((ds.Tables["mylog"] != null)) {
                    base.Tables.Add(new mylogDataTable(ds.Tables["mylog"]));
                }
                if ((ds.Tables["V_DQ_BATCH_LEVEL_RESULTS"] != null)) {
                    base.Tables.Add(new V_DQ_BATCH_LEVEL_RESULTSDataTable(ds.Tables["V_DQ_BATCH_LEVEL_RESULTS"]));
                }
                if ((ds.Tables["V_DQ_FIELD_LEVEL_RESULTS"] != null)) {
                    base.Tables.Add(new V_DQ_FIELD_LEVEL_RESULTSDataTable(ds.Tables["V_DQ_FIELD_LEVEL_RESULTS"]));
                }
                if ((ds.Tables["V_DQ_MASTER"] != null)) {
                    base.Tables.Add(new V_DQ_MASTERDataTable(ds.Tables["V_DQ_MASTER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DQ_BATCH_ERROR_DETAILSDataTable DQ_BATCH_ERROR_DETAILS {
            get {
                return this.tableDQ_BATCH_ERROR_DETAILS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DQ_BATCH_LOGDataTable DQ_BATCH_LOG {
            get {
                return this.tableDQ_BATCH_LOG;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DQ_BATCHESDataTable DQ_BATCHES {
            get {
                return this.tableDQ_BATCHES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DQ_BATCHES_FIELDSDataTable DQ_BATCHES_FIELDS {
            get {
                return this.tableDQ_BATCHES_FIELDS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DQ_CHECK_RESULTSDataTable DQ_CHECK_RESULTS {
            get {
                return this.tableDQ_CHECK_RESULTS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DQ_DATABASESDataTable DQ_DATABASES {
            get {
                return this.tableDQ_DATABASES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DQ_FIELDSDataTable DQ_FIELDS {
            get {
                return this.tableDQ_FIELDS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DQ_TABLESDataTable DQ_TABLES {
            get {
                return this.tableDQ_TABLES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mylogDataTable mylog {
            get {
                return this.tablemylog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public V_DQ_BATCH_LEVEL_RESULTSDataTable V_DQ_BATCH_LEVEL_RESULTS {
            get {
                return this.tableV_DQ_BATCH_LEVEL_RESULTS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public V_DQ_FIELD_LEVEL_RESULTSDataTable V_DQ_FIELD_LEVEL_RESULTS {
            get {
                return this.tableV_DQ_FIELD_LEVEL_RESULTS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public V_DQ_MASTERDataTable V_DQ_MASTER {
            get {
                return this.tableV_DQ_MASTER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AF_TESTDataSet cln = ((AF_TESTDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DQ_BATCH_ERROR_DETAILS"] != null)) {
                    base.Tables.Add(new DQ_BATCH_ERROR_DETAILSDataTable(ds.Tables["DQ_BATCH_ERROR_DETAILS"]));
                }
                if ((ds.Tables["DQ_BATCH_LOG"] != null)) {
                    base.Tables.Add(new DQ_BATCH_LOGDataTable(ds.Tables["DQ_BATCH_LOG"]));
                }
                if ((ds.Tables["DQ_BATCHES"] != null)) {
                    base.Tables.Add(new DQ_BATCHESDataTable(ds.Tables["DQ_BATCHES"]));
                }
                if ((ds.Tables["DQ_BATCHES_FIELDS"] != null)) {
                    base.Tables.Add(new DQ_BATCHES_FIELDSDataTable(ds.Tables["DQ_BATCHES_FIELDS"]));
                }
                if ((ds.Tables["DQ_CHECK_RESULTS"] != null)) {
                    base.Tables.Add(new DQ_CHECK_RESULTSDataTable(ds.Tables["DQ_CHECK_RESULTS"]));
                }
                if ((ds.Tables["DQ_DATABASES"] != null)) {
                    base.Tables.Add(new DQ_DATABASESDataTable(ds.Tables["DQ_DATABASES"]));
                }
                if ((ds.Tables["DQ_FIELDS"] != null)) {
                    base.Tables.Add(new DQ_FIELDSDataTable(ds.Tables["DQ_FIELDS"]));
                }
                if ((ds.Tables["DQ_TABLES"] != null)) {
                    base.Tables.Add(new DQ_TABLESDataTable(ds.Tables["DQ_TABLES"]));
                }
                if ((ds.Tables["mylog"] != null)) {
                    base.Tables.Add(new mylogDataTable(ds.Tables["mylog"]));
                }
                if ((ds.Tables["V_DQ_BATCH_LEVEL_RESULTS"] != null)) {
                    base.Tables.Add(new V_DQ_BATCH_LEVEL_RESULTSDataTable(ds.Tables["V_DQ_BATCH_LEVEL_RESULTS"]));
                }
                if ((ds.Tables["V_DQ_FIELD_LEVEL_RESULTS"] != null)) {
                    base.Tables.Add(new V_DQ_FIELD_LEVEL_RESULTSDataTable(ds.Tables["V_DQ_FIELD_LEVEL_RESULTS"]));
                }
                if ((ds.Tables["V_DQ_MASTER"] != null)) {
                    base.Tables.Add(new V_DQ_MASTERDataTable(ds.Tables["V_DQ_MASTER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDQ_BATCH_ERROR_DETAILS = ((DQ_BATCH_ERROR_DETAILSDataTable)(base.Tables["DQ_BATCH_ERROR_DETAILS"]));
            if ((initTable == true)) {
                if ((this.tableDQ_BATCH_ERROR_DETAILS != null)) {
                    this.tableDQ_BATCH_ERROR_DETAILS.InitVars();
                }
            }
            this.tableDQ_BATCH_LOG = ((DQ_BATCH_LOGDataTable)(base.Tables["DQ_BATCH_LOG"]));
            if ((initTable == true)) {
                if ((this.tableDQ_BATCH_LOG != null)) {
                    this.tableDQ_BATCH_LOG.InitVars();
                }
            }
            this.tableDQ_BATCHES = ((DQ_BATCHESDataTable)(base.Tables["DQ_BATCHES"]));
            if ((initTable == true)) {
                if ((this.tableDQ_BATCHES != null)) {
                    this.tableDQ_BATCHES.InitVars();
                }
            }
            this.tableDQ_BATCHES_FIELDS = ((DQ_BATCHES_FIELDSDataTable)(base.Tables["DQ_BATCHES_FIELDS"]));
            if ((initTable == true)) {
                if ((this.tableDQ_BATCHES_FIELDS != null)) {
                    this.tableDQ_BATCHES_FIELDS.InitVars();
                }
            }
            this.tableDQ_CHECK_RESULTS = ((DQ_CHECK_RESULTSDataTable)(base.Tables["DQ_CHECK_RESULTS"]));
            if ((initTable == true)) {
                if ((this.tableDQ_CHECK_RESULTS != null)) {
                    this.tableDQ_CHECK_RESULTS.InitVars();
                }
            }
            this.tableDQ_DATABASES = ((DQ_DATABASESDataTable)(base.Tables["DQ_DATABASES"]));
            if ((initTable == true)) {
                if ((this.tableDQ_DATABASES != null)) {
                    this.tableDQ_DATABASES.InitVars();
                }
            }
            this.tableDQ_FIELDS = ((DQ_FIELDSDataTable)(base.Tables["DQ_FIELDS"]));
            if ((initTable == true)) {
                if ((this.tableDQ_FIELDS != null)) {
                    this.tableDQ_FIELDS.InitVars();
                }
            }
            this.tableDQ_TABLES = ((DQ_TABLESDataTable)(base.Tables["DQ_TABLES"]));
            if ((initTable == true)) {
                if ((this.tableDQ_TABLES != null)) {
                    this.tableDQ_TABLES.InitVars();
                }
            }
            this.tablemylog = ((mylogDataTable)(base.Tables["mylog"]));
            if ((initTable == true)) {
                if ((this.tablemylog != null)) {
                    this.tablemylog.InitVars();
                }
            }
            this.tableV_DQ_BATCH_LEVEL_RESULTS = ((V_DQ_BATCH_LEVEL_RESULTSDataTable)(base.Tables["V_DQ_BATCH_LEVEL_RESULTS"]));
            if ((initTable == true)) {
                if ((this.tableV_DQ_BATCH_LEVEL_RESULTS != null)) {
                    this.tableV_DQ_BATCH_LEVEL_RESULTS.InitVars();
                }
            }
            this.tableV_DQ_FIELD_LEVEL_RESULTS = ((V_DQ_FIELD_LEVEL_RESULTSDataTable)(base.Tables["V_DQ_FIELD_LEVEL_RESULTS"]));
            if ((initTable == true)) {
                if ((this.tableV_DQ_FIELD_LEVEL_RESULTS != null)) {
                    this.tableV_DQ_FIELD_LEVEL_RESULTS.InitVars();
                }
            }
            this.tableV_DQ_MASTER = ((V_DQ_MASTERDataTable)(base.Tables["V_DQ_MASTER"]));
            if ((initTable == true)) {
                if ((this.tableV_DQ_MASTER != null)) {
                    this.tableV_DQ_MASTER.InitVars();
                }
            }
            this.relationFK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS = this.Relations["FK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS"];
            this.relationFK_DQ_BATCH_LOG_DQ_BATCHES = this.Relations["FK_DQ_BATCH_LOG_DQ_BATCHES"];
            this.relationFK_BATCHES_FIELDS_BATCHES = this.Relations["FK_BATCHES_FIELDS_BATCHES"];
            this.relationFK_BATCHES_FIELDS_FIELDS = this.Relations["FK_BATCHES_FIELDS_FIELDS"];
            this.relationFK_STATISTICS_BATCHES = this.Relations["FK_STATISTICS_BATCHES"];
            this.relationFK_STATISTICS_FIELDS = this.Relations["FK_STATISTICS_FIELDS"];
            this.relationFK_FIELDS_TABLES = this.Relations["FK_FIELDS_TABLES"];
            this.relationFK_TABLES_DATABASES = this.Relations["FK_TABLES_DATABASES"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AF_TESTDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AF_TESTDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDQ_BATCH_ERROR_DETAILS = new DQ_BATCH_ERROR_DETAILSDataTable();
            base.Tables.Add(this.tableDQ_BATCH_ERROR_DETAILS);
            this.tableDQ_BATCH_LOG = new DQ_BATCH_LOGDataTable();
            base.Tables.Add(this.tableDQ_BATCH_LOG);
            this.tableDQ_BATCHES = new DQ_BATCHESDataTable();
            base.Tables.Add(this.tableDQ_BATCHES);
            this.tableDQ_BATCHES_FIELDS = new DQ_BATCHES_FIELDSDataTable();
            base.Tables.Add(this.tableDQ_BATCHES_FIELDS);
            this.tableDQ_CHECK_RESULTS = new DQ_CHECK_RESULTSDataTable();
            base.Tables.Add(this.tableDQ_CHECK_RESULTS);
            this.tableDQ_DATABASES = new DQ_DATABASESDataTable();
            base.Tables.Add(this.tableDQ_DATABASES);
            this.tableDQ_FIELDS = new DQ_FIELDSDataTable();
            base.Tables.Add(this.tableDQ_FIELDS);
            this.tableDQ_TABLES = new DQ_TABLESDataTable();
            base.Tables.Add(this.tableDQ_TABLES);
            this.tablemylog = new mylogDataTable();
            base.Tables.Add(this.tablemylog);
            this.tableV_DQ_BATCH_LEVEL_RESULTS = new V_DQ_BATCH_LEVEL_RESULTSDataTable();
            base.Tables.Add(this.tableV_DQ_BATCH_LEVEL_RESULTS);
            this.tableV_DQ_FIELD_LEVEL_RESULTS = new V_DQ_FIELD_LEVEL_RESULTSDataTable();
            base.Tables.Add(this.tableV_DQ_FIELD_LEVEL_RESULTS);
            this.tableV_DQ_MASTER = new V_DQ_MASTERDataTable();
            base.Tables.Add(this.tableV_DQ_MASTER);
            this.relationFK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS = new global::System.Data.DataRelation("FK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS", new global::System.Data.DataColumn[] {
                        this.tableDQ_FIELDS.field_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableDQ_BATCH_ERROR_DETAILS.field_idColumn}, false);
            this.Relations.Add(this.relationFK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS);
            this.relationFK_DQ_BATCH_LOG_DQ_BATCHES = new global::System.Data.DataRelation("FK_DQ_BATCH_LOG_DQ_BATCHES", new global::System.Data.DataColumn[] {
                        this.tableDQ_BATCHES.batch_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableDQ_BATCH_LOG.batch_idColumn}, false);
            this.Relations.Add(this.relationFK_DQ_BATCH_LOG_DQ_BATCHES);
            this.relationFK_BATCHES_FIELDS_BATCHES = new global::System.Data.DataRelation("FK_BATCHES_FIELDS_BATCHES", new global::System.Data.DataColumn[] {
                        this.tableDQ_BATCHES.batch_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableDQ_BATCHES_FIELDS.batch_idColumn}, false);
            this.Relations.Add(this.relationFK_BATCHES_FIELDS_BATCHES);
            this.relationFK_BATCHES_FIELDS_FIELDS = new global::System.Data.DataRelation("FK_BATCHES_FIELDS_FIELDS", new global::System.Data.DataColumn[] {
                        this.tableDQ_FIELDS.field_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableDQ_BATCHES_FIELDS.field_idColumn}, false);
            this.Relations.Add(this.relationFK_BATCHES_FIELDS_FIELDS);
            this.relationFK_STATISTICS_BATCHES = new global::System.Data.DataRelation("FK_STATISTICS_BATCHES", new global::System.Data.DataColumn[] {
                        this.tableDQ_BATCHES.batch_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableDQ_CHECK_RESULTS.batch_idColumn}, false);
            this.Relations.Add(this.relationFK_STATISTICS_BATCHES);
            this.relationFK_STATISTICS_FIELDS = new global::System.Data.DataRelation("FK_STATISTICS_FIELDS", new global::System.Data.DataColumn[] {
                        this.tableDQ_FIELDS.field_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableDQ_CHECK_RESULTS.field_idColumn}, false);
            this.Relations.Add(this.relationFK_STATISTICS_FIELDS);
            this.relationFK_FIELDS_TABLES = new global::System.Data.DataRelation("FK_FIELDS_TABLES", new global::System.Data.DataColumn[] {
                        this.tableDQ_TABLES.table_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableDQ_FIELDS.table_idColumn}, false);
            this.Relations.Add(this.relationFK_FIELDS_TABLES);
            this.relationFK_TABLES_DATABASES = new global::System.Data.DataRelation("FK_TABLES_DATABASES", new global::System.Data.DataColumn[] {
                        this.tableDQ_DATABASES.database_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableDQ_TABLES.database_idColumn}, false);
            this.Relations.Add(this.relationFK_TABLES_DATABASES);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDQ_BATCH_ERROR_DETAILS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDQ_BATCH_LOG() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDQ_BATCHES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDQ_BATCHES_FIELDS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDQ_CHECK_RESULTS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDQ_DATABASES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDQ_FIELDS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDQ_TABLES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemylog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeV_DQ_BATCH_LEVEL_RESULTS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeV_DQ_FIELD_LEVEL_RESULTS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeV_DQ_MASTER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AF_TESTDataSet ds = new AF_TESTDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DQ_BATCH_ERROR_DETAILSRowChangeEventHandler(object sender, DQ_BATCH_ERROR_DETAILSRowChangeEvent e);
        
        public delegate void DQ_BATCH_LOGRowChangeEventHandler(object sender, DQ_BATCH_LOGRowChangeEvent e);
        
        public delegate void DQ_BATCHESRowChangeEventHandler(object sender, DQ_BATCHESRowChangeEvent e);
        
        public delegate void DQ_BATCHES_FIELDSRowChangeEventHandler(object sender, DQ_BATCHES_FIELDSRowChangeEvent e);
        
        public delegate void DQ_CHECK_RESULTSRowChangeEventHandler(object sender, DQ_CHECK_RESULTSRowChangeEvent e);
        
        public delegate void DQ_DATABASESRowChangeEventHandler(object sender, DQ_DATABASESRowChangeEvent e);
        
        public delegate void DQ_FIELDSRowChangeEventHandler(object sender, DQ_FIELDSRowChangeEvent e);
        
        public delegate void DQ_TABLESRowChangeEventHandler(object sender, DQ_TABLESRowChangeEvent e);
        
        public delegate void mylogRowChangeEventHandler(object sender, mylogRowChangeEvent e);
        
        public delegate void V_DQ_BATCH_LEVEL_RESULTSRowChangeEventHandler(object sender, V_DQ_BATCH_LEVEL_RESULTSRowChangeEvent e);
        
        public delegate void V_DQ_FIELD_LEVEL_RESULTSRowChangeEventHandler(object sender, V_DQ_FIELD_LEVEL_RESULTSRowChangeEvent e);
        
        public delegate void V_DQ_MASTERRowChangeEventHandler(object sender, V_DQ_MASTERRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DQ_BATCH_ERROR_DETAILSDataTable : global::System.Data.TypedTableBase<DQ_BATCH_ERROR_DETAILSRow> {
            
            private global::System.Data.DataColumn columnbatch_log_id;
            
            private global::System.Data.DataColumn columnbatch_log_detail_id;
            
            private global::System.Data.DataColumn columnfield_id;
            
            private global::System.Data.DataColumn columnmssql_error_number;
            
            private global::System.Data.DataColumn columnmssql_error_severity;
            
            private global::System.Data.DataColumn columnmssql_error_state;
            
            private global::System.Data.DataColumn columnmssql_error_procedure;
            
            private global::System.Data.DataColumn columnmssql_error_line;
            
            private global::System.Data.DataColumn columnmssql_error_message;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_ERROR_DETAILSDataTable() {
                this.TableName = "DQ_BATCH_ERROR_DETAILS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_BATCH_ERROR_DETAILSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DQ_BATCH_ERROR_DETAILSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_log_idColumn {
                get {
                    return this.columnbatch_log_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_log_detail_idColumn {
                get {
                    return this.columnbatch_log_detail_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn field_idColumn {
                get {
                    return this.columnfield_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mssql_error_numberColumn {
                get {
                    return this.columnmssql_error_number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mssql_error_severityColumn {
                get {
                    return this.columnmssql_error_severity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mssql_error_stateColumn {
                get {
                    return this.columnmssql_error_state;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mssql_error_procedureColumn {
                get {
                    return this.columnmssql_error_procedure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mssql_error_lineColumn {
                get {
                    return this.columnmssql_error_line;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mssql_error_messageColumn {
                get {
                    return this.columnmssql_error_message;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_ERROR_DETAILSRow this[int index] {
                get {
                    return ((DQ_BATCH_ERROR_DETAILSRow)(this.Rows[index]));
                }
            }
            
            public event DQ_BATCH_ERROR_DETAILSRowChangeEventHandler DQ_BATCH_ERROR_DETAILSRowChanging;
            
            public event DQ_BATCH_ERROR_DETAILSRowChangeEventHandler DQ_BATCH_ERROR_DETAILSRowChanged;
            
            public event DQ_BATCH_ERROR_DETAILSRowChangeEventHandler DQ_BATCH_ERROR_DETAILSRowDeleting;
            
            public event DQ_BATCH_ERROR_DETAILSRowChangeEventHandler DQ_BATCH_ERROR_DETAILSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDQ_BATCH_ERROR_DETAILSRow(DQ_BATCH_ERROR_DETAILSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_ERROR_DETAILSRow AddDQ_BATCH_ERROR_DETAILSRow(int batch_log_id, int batch_log_detail_id, DQ_FIELDSRow parentDQ_FIELDSRowByFK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS, int mssql_error_number, int mssql_error_severity, int mssql_error_state, string mssql_error_procedure, int mssql_error_line, string mssql_error_message) {
                DQ_BATCH_ERROR_DETAILSRow rowDQ_BATCH_ERROR_DETAILSRow = ((DQ_BATCH_ERROR_DETAILSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        batch_log_id,
                        batch_log_detail_id,
                        null,
                        mssql_error_number,
                        mssql_error_severity,
                        mssql_error_state,
                        mssql_error_procedure,
                        mssql_error_line,
                        mssql_error_message};
                if ((parentDQ_FIELDSRowByFK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS != null)) {
                    columnValuesArray[2] = parentDQ_FIELDSRowByFK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS[0];
                }
                rowDQ_BATCH_ERROR_DETAILSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDQ_BATCH_ERROR_DETAILSRow);
                return rowDQ_BATCH_ERROR_DETAILSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_ERROR_DETAILSRow FindBybatch_log_idbatch_log_detail_id(int batch_log_id, int batch_log_detail_id) {
                return ((DQ_BATCH_ERROR_DETAILSRow)(this.Rows.Find(new object[] {
                            batch_log_id,
                            batch_log_detail_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DQ_BATCH_ERROR_DETAILSDataTable cln = ((DQ_BATCH_ERROR_DETAILSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DQ_BATCH_ERROR_DETAILSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbatch_log_id = base.Columns["batch_log_id"];
                this.columnbatch_log_detail_id = base.Columns["batch_log_detail_id"];
                this.columnfield_id = base.Columns["field_id"];
                this.columnmssql_error_number = base.Columns["mssql_error_number"];
                this.columnmssql_error_severity = base.Columns["mssql_error_severity"];
                this.columnmssql_error_state = base.Columns["mssql_error_state"];
                this.columnmssql_error_procedure = base.Columns["mssql_error_procedure"];
                this.columnmssql_error_line = base.Columns["mssql_error_line"];
                this.columnmssql_error_message = base.Columns["mssql_error_message"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbatch_log_id = new global::System.Data.DataColumn("batch_log_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_log_id);
                this.columnbatch_log_detail_id = new global::System.Data.DataColumn("batch_log_detail_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_log_detail_id);
                this.columnfield_id = new global::System.Data.DataColumn("field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfield_id);
                this.columnmssql_error_number = new global::System.Data.DataColumn("mssql_error_number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmssql_error_number);
                this.columnmssql_error_severity = new global::System.Data.DataColumn("mssql_error_severity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmssql_error_severity);
                this.columnmssql_error_state = new global::System.Data.DataColumn("mssql_error_state", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmssql_error_state);
                this.columnmssql_error_procedure = new global::System.Data.DataColumn("mssql_error_procedure", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmssql_error_procedure);
                this.columnmssql_error_line = new global::System.Data.DataColumn("mssql_error_line", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmssql_error_line);
                this.columnmssql_error_message = new global::System.Data.DataColumn("mssql_error_message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmssql_error_message);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbatch_log_id,
                                this.columnbatch_log_detail_id}, true));
                this.columnbatch_log_id.AllowDBNull = false;
                this.columnbatch_log_detail_id.AllowDBNull = false;
                this.columnfield_id.AllowDBNull = false;
                this.columnmssql_error_procedure.MaxLength = 126;
                this.columnmssql_error_message.MaxLength = 2048;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_ERROR_DETAILSRow NewDQ_BATCH_ERROR_DETAILSRow() {
                return ((DQ_BATCH_ERROR_DETAILSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DQ_BATCH_ERROR_DETAILSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DQ_BATCH_ERROR_DETAILSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DQ_BATCH_ERROR_DETAILSRowChanged != null)) {
                    this.DQ_BATCH_ERROR_DETAILSRowChanged(this, new DQ_BATCH_ERROR_DETAILSRowChangeEvent(((DQ_BATCH_ERROR_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DQ_BATCH_ERROR_DETAILSRowChanging != null)) {
                    this.DQ_BATCH_ERROR_DETAILSRowChanging(this, new DQ_BATCH_ERROR_DETAILSRowChangeEvent(((DQ_BATCH_ERROR_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DQ_BATCH_ERROR_DETAILSRowDeleted != null)) {
                    this.DQ_BATCH_ERROR_DETAILSRowDeleted(this, new DQ_BATCH_ERROR_DETAILSRowChangeEvent(((DQ_BATCH_ERROR_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DQ_BATCH_ERROR_DETAILSRowDeleting != null)) {
                    this.DQ_BATCH_ERROR_DETAILSRowDeleting(this, new DQ_BATCH_ERROR_DETAILSRowChangeEvent(((DQ_BATCH_ERROR_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDQ_BATCH_ERROR_DETAILSRow(DQ_BATCH_ERROR_DETAILSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DQ_BATCH_ERROR_DETAILSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DQ_BATCH_LOGDataTable : global::System.Data.TypedTableBase<DQ_BATCH_LOGRow> {
            
            private global::System.Data.DataColumn columnbatch_log_id;
            
            private global::System.Data.DataColumn columnbatch_id;
            
            private global::System.Data.DataColumn columnstart_time;
            
            private global::System.Data.DataColumn columnend_time;
            
            private global::System.Data.DataColumn columnbatch_check_ok;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_LOGDataTable() {
                this.TableName = "DQ_BATCH_LOG";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_BATCH_LOGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DQ_BATCH_LOGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_log_idColumn {
                get {
                    return this.columnbatch_log_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_idColumn {
                get {
                    return this.columnbatch_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn start_timeColumn {
                get {
                    return this.columnstart_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn end_timeColumn {
                get {
                    return this.columnend_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_check_okColumn {
                get {
                    return this.columnbatch_check_ok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_LOGRow this[int index] {
                get {
                    return ((DQ_BATCH_LOGRow)(this.Rows[index]));
                }
            }
            
            public event DQ_BATCH_LOGRowChangeEventHandler DQ_BATCH_LOGRowChanging;
            
            public event DQ_BATCH_LOGRowChangeEventHandler DQ_BATCH_LOGRowChanged;
            
            public event DQ_BATCH_LOGRowChangeEventHandler DQ_BATCH_LOGRowDeleting;
            
            public event DQ_BATCH_LOGRowChangeEventHandler DQ_BATCH_LOGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDQ_BATCH_LOGRow(DQ_BATCH_LOGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_LOGRow AddDQ_BATCH_LOGRow(DQ_BATCHESRow parentDQ_BATCHESRowByFK_DQ_BATCH_LOG_DQ_BATCHES, System.DateTime start_time, System.DateTime end_time, bool batch_check_ok) {
                DQ_BATCH_LOGRow rowDQ_BATCH_LOGRow = ((DQ_BATCH_LOGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        start_time,
                        end_time,
                        batch_check_ok};
                if ((parentDQ_BATCHESRowByFK_DQ_BATCH_LOG_DQ_BATCHES != null)) {
                    columnValuesArray[1] = parentDQ_BATCHESRowByFK_DQ_BATCH_LOG_DQ_BATCHES[0];
                }
                rowDQ_BATCH_LOGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDQ_BATCH_LOGRow);
                return rowDQ_BATCH_LOGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_LOGRow FindBybatch_log_id(int batch_log_id) {
                return ((DQ_BATCH_LOGRow)(this.Rows.Find(new object[] {
                            batch_log_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DQ_BATCH_LOGDataTable cln = ((DQ_BATCH_LOGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DQ_BATCH_LOGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbatch_log_id = base.Columns["batch_log_id"];
                this.columnbatch_id = base.Columns["batch_id"];
                this.columnstart_time = base.Columns["start_time"];
                this.columnend_time = base.Columns["end_time"];
                this.columnbatch_check_ok = base.Columns["batch_check_ok"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbatch_log_id = new global::System.Data.DataColumn("batch_log_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_log_id);
                this.columnbatch_id = new global::System.Data.DataColumn("batch_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_id);
                this.columnstart_time = new global::System.Data.DataColumn("start_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart_time);
                this.columnend_time = new global::System.Data.DataColumn("end_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnend_time);
                this.columnbatch_check_ok = new global::System.Data.DataColumn("batch_check_ok", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_check_ok);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbatch_log_id}, true));
                this.columnbatch_log_id.AutoIncrement = true;
                this.columnbatch_log_id.AutoIncrementSeed = -1;
                this.columnbatch_log_id.AutoIncrementStep = -1;
                this.columnbatch_log_id.AllowDBNull = false;
                this.columnbatch_log_id.ReadOnly = true;
                this.columnbatch_log_id.Unique = true;
                this.columnbatch_id.AllowDBNull = false;
                this.columnstart_time.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_LOGRow NewDQ_BATCH_LOGRow() {
                return ((DQ_BATCH_LOGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DQ_BATCH_LOGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DQ_BATCH_LOGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DQ_BATCH_LOGRowChanged != null)) {
                    this.DQ_BATCH_LOGRowChanged(this, new DQ_BATCH_LOGRowChangeEvent(((DQ_BATCH_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DQ_BATCH_LOGRowChanging != null)) {
                    this.DQ_BATCH_LOGRowChanging(this, new DQ_BATCH_LOGRowChangeEvent(((DQ_BATCH_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DQ_BATCH_LOGRowDeleted != null)) {
                    this.DQ_BATCH_LOGRowDeleted(this, new DQ_BATCH_LOGRowChangeEvent(((DQ_BATCH_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DQ_BATCH_LOGRowDeleting != null)) {
                    this.DQ_BATCH_LOGRowDeleting(this, new DQ_BATCH_LOGRowChangeEvent(((DQ_BATCH_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDQ_BATCH_LOGRow(DQ_BATCH_LOGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DQ_BATCH_LOGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DQ_BATCHESDataTable : global::System.Data.TypedTableBase<DQ_BATCHESRow> {
            
            private global::System.Data.DataColumn columnbatch_id;
            
            private global::System.Data.DataColumn columnbatch_name;
            
            private global::System.Data.DataColumn columnbatch_active;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHESDataTable() {
                this.TableName = "DQ_BATCHES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_BATCHESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DQ_BATCHESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_idColumn {
                get {
                    return this.columnbatch_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_nameColumn {
                get {
                    return this.columnbatch_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_activeColumn {
                get {
                    return this.columnbatch_active;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHESRow this[int index] {
                get {
                    return ((DQ_BATCHESRow)(this.Rows[index]));
                }
            }
            
            public event DQ_BATCHESRowChangeEventHandler DQ_BATCHESRowChanging;
            
            public event DQ_BATCHESRowChangeEventHandler DQ_BATCHESRowChanged;
            
            public event DQ_BATCHESRowChangeEventHandler DQ_BATCHESRowDeleting;
            
            public event DQ_BATCHESRowChangeEventHandler DQ_BATCHESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDQ_BATCHESRow(DQ_BATCHESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHESRow AddDQ_BATCHESRow(string batch_name, bool batch_active) {
                DQ_BATCHESRow rowDQ_BATCHESRow = ((DQ_BATCHESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        batch_name,
                        batch_active};
                rowDQ_BATCHESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDQ_BATCHESRow);
                return rowDQ_BATCHESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHESRow FindBybatch_id(int batch_id) {
                return ((DQ_BATCHESRow)(this.Rows.Find(new object[] {
                            batch_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DQ_BATCHESDataTable cln = ((DQ_BATCHESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DQ_BATCHESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbatch_id = base.Columns["batch_id"];
                this.columnbatch_name = base.Columns["batch_name"];
                this.columnbatch_active = base.Columns["batch_active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbatch_id = new global::System.Data.DataColumn("batch_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_id);
                this.columnbatch_name = new global::System.Data.DataColumn("batch_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_name);
                this.columnbatch_active = new global::System.Data.DataColumn("batch_active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_active);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbatch_id}, true));
                this.columnbatch_id.AutoIncrement = true;
                this.columnbatch_id.AutoIncrementSeed = -1;
                this.columnbatch_id.AutoIncrementStep = -1;
                this.columnbatch_id.AllowDBNull = false;
                this.columnbatch_id.ReadOnly = true;
                this.columnbatch_id.Unique = true;
                this.columnbatch_name.AllowDBNull = false;
                this.columnbatch_name.MaxLength = 50;
                this.columnbatch_active.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHESRow NewDQ_BATCHESRow() {
                return ((DQ_BATCHESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DQ_BATCHESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DQ_BATCHESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DQ_BATCHESRowChanged != null)) {
                    this.DQ_BATCHESRowChanged(this, new DQ_BATCHESRowChangeEvent(((DQ_BATCHESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DQ_BATCHESRowChanging != null)) {
                    this.DQ_BATCHESRowChanging(this, new DQ_BATCHESRowChangeEvent(((DQ_BATCHESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DQ_BATCHESRowDeleted != null)) {
                    this.DQ_BATCHESRowDeleted(this, new DQ_BATCHESRowChangeEvent(((DQ_BATCHESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DQ_BATCHESRowDeleting != null)) {
                    this.DQ_BATCHESRowDeleting(this, new DQ_BATCHESRowChangeEvent(((DQ_BATCHESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDQ_BATCHESRow(DQ_BATCHESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DQ_BATCHESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DQ_BATCHES_FIELDSDataTable : global::System.Data.TypedTableBase<DQ_BATCHES_FIELDSRow> {
            
            private global::System.Data.DataColumn columnbatch_id;
            
            private global::System.Data.DataColumn columnfield_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHES_FIELDSDataTable() {
                this.TableName = "DQ_BATCHES_FIELDS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_BATCHES_FIELDSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DQ_BATCHES_FIELDSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_idColumn {
                get {
                    return this.columnbatch_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn field_idColumn {
                get {
                    return this.columnfield_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHES_FIELDSRow this[int index] {
                get {
                    return ((DQ_BATCHES_FIELDSRow)(this.Rows[index]));
                }
            }
            
            public event DQ_BATCHES_FIELDSRowChangeEventHandler DQ_BATCHES_FIELDSRowChanging;
            
            public event DQ_BATCHES_FIELDSRowChangeEventHandler DQ_BATCHES_FIELDSRowChanged;
            
            public event DQ_BATCHES_FIELDSRowChangeEventHandler DQ_BATCHES_FIELDSRowDeleting;
            
            public event DQ_BATCHES_FIELDSRowChangeEventHandler DQ_BATCHES_FIELDSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDQ_BATCHES_FIELDSRow(DQ_BATCHES_FIELDSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHES_FIELDSRow AddDQ_BATCHES_FIELDSRow(DQ_BATCHESRow parentDQ_BATCHESRowByFK_BATCHES_FIELDS_BATCHES, DQ_FIELDSRow parentDQ_FIELDSRowByFK_BATCHES_FIELDS_FIELDS) {
                DQ_BATCHES_FIELDSRow rowDQ_BATCHES_FIELDSRow = ((DQ_BATCHES_FIELDSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentDQ_BATCHESRowByFK_BATCHES_FIELDS_BATCHES != null)) {
                    columnValuesArray[0] = parentDQ_BATCHESRowByFK_BATCHES_FIELDS_BATCHES[0];
                }
                if ((parentDQ_FIELDSRowByFK_BATCHES_FIELDS_FIELDS != null)) {
                    columnValuesArray[1] = parentDQ_FIELDSRowByFK_BATCHES_FIELDS_FIELDS[0];
                }
                rowDQ_BATCHES_FIELDSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDQ_BATCHES_FIELDSRow);
                return rowDQ_BATCHES_FIELDSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHES_FIELDSRow FindBybatch_idfield_id(int batch_id, int field_id) {
                return ((DQ_BATCHES_FIELDSRow)(this.Rows.Find(new object[] {
                            batch_id,
                            field_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DQ_BATCHES_FIELDSDataTable cln = ((DQ_BATCHES_FIELDSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DQ_BATCHES_FIELDSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbatch_id = base.Columns["batch_id"];
                this.columnfield_id = base.Columns["field_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbatch_id = new global::System.Data.DataColumn("batch_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_id);
                this.columnfield_id = new global::System.Data.DataColumn("field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfield_id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbatch_id,
                                this.columnfield_id}, true));
                this.columnbatch_id.AllowDBNull = false;
                this.columnfield_id.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHES_FIELDSRow NewDQ_BATCHES_FIELDSRow() {
                return ((DQ_BATCHES_FIELDSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DQ_BATCHES_FIELDSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DQ_BATCHES_FIELDSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DQ_BATCHES_FIELDSRowChanged != null)) {
                    this.DQ_BATCHES_FIELDSRowChanged(this, new DQ_BATCHES_FIELDSRowChangeEvent(((DQ_BATCHES_FIELDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DQ_BATCHES_FIELDSRowChanging != null)) {
                    this.DQ_BATCHES_FIELDSRowChanging(this, new DQ_BATCHES_FIELDSRowChangeEvent(((DQ_BATCHES_FIELDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DQ_BATCHES_FIELDSRowDeleted != null)) {
                    this.DQ_BATCHES_FIELDSRowDeleted(this, new DQ_BATCHES_FIELDSRowChangeEvent(((DQ_BATCHES_FIELDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DQ_BATCHES_FIELDSRowDeleting != null)) {
                    this.DQ_BATCHES_FIELDSRowDeleting(this, new DQ_BATCHES_FIELDSRowChangeEvent(((DQ_BATCHES_FIELDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDQ_BATCHES_FIELDSRow(DQ_BATCHES_FIELDSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DQ_BATCHES_FIELDSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DQ_CHECK_RESULTSDataTable : global::System.Data.TypedTableBase<DQ_CHECK_RESULTSRow> {
            
            private global::System.Data.DataColumn columndq_check_result_id;
            
            private global::System.Data.DataColumn columnbatch_id;
            
            private global::System.Data.DataColumn columnfield_id;
            
            private global::System.Data.DataColumn columndq_check_date;
            
            private global::System.Data.DataColumn columnrow_nr;
            
            private global::System.Data.DataColumn columncategory_nr;
            
            private global::System.Data.DataColumn columnrow_nr_trend_check_ok;
            
            private global::System.Data.DataColumn columncategory_nr_trend_check_ok;
            
            private global::System.Data.DataColumn columnstdev_check_ok;
            
            private global::System.Data.DataColumn columnuser_defined_check_ok;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_CHECK_RESULTSDataTable() {
                this.TableName = "DQ_CHECK_RESULTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_CHECK_RESULTSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DQ_CHECK_RESULTSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dq_check_result_idColumn {
                get {
                    return this.columndq_check_result_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_idColumn {
                get {
                    return this.columnbatch_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn field_idColumn {
                get {
                    return this.columnfield_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dq_check_dateColumn {
                get {
                    return this.columndq_check_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn row_nrColumn {
                get {
                    return this.columnrow_nr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_nrColumn {
                get {
                    return this.columncategory_nr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn row_nr_trend_check_okColumn {
                get {
                    return this.columnrow_nr_trend_check_ok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_nr_trend_check_okColumn {
                get {
                    return this.columncategory_nr_trend_check_ok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stdev_check_okColumn {
                get {
                    return this.columnstdev_check_ok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_defined_check_okColumn {
                get {
                    return this.columnuser_defined_check_ok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_CHECK_RESULTSRow this[int index] {
                get {
                    return ((DQ_CHECK_RESULTSRow)(this.Rows[index]));
                }
            }
            
            public event DQ_CHECK_RESULTSRowChangeEventHandler DQ_CHECK_RESULTSRowChanging;
            
            public event DQ_CHECK_RESULTSRowChangeEventHandler DQ_CHECK_RESULTSRowChanged;
            
            public event DQ_CHECK_RESULTSRowChangeEventHandler DQ_CHECK_RESULTSRowDeleting;
            
            public event DQ_CHECK_RESULTSRowChangeEventHandler DQ_CHECK_RESULTSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDQ_CHECK_RESULTSRow(DQ_CHECK_RESULTSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_CHECK_RESULTSRow AddDQ_CHECK_RESULTSRow(DQ_BATCHESRow parentDQ_BATCHESRowByFK_STATISTICS_BATCHES, DQ_FIELDSRow parentDQ_FIELDSRowByFK_STATISTICS_FIELDS, System.DateTime dq_check_date, long row_nr, long category_nr, bool row_nr_trend_check_ok, bool category_nr_trend_check_ok, bool stdev_check_ok, bool user_defined_check_ok) {
                DQ_CHECK_RESULTSRow rowDQ_CHECK_RESULTSRow = ((DQ_CHECK_RESULTSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        dq_check_date,
                        row_nr,
                        category_nr,
                        row_nr_trend_check_ok,
                        category_nr_trend_check_ok,
                        stdev_check_ok,
                        user_defined_check_ok};
                if ((parentDQ_BATCHESRowByFK_STATISTICS_BATCHES != null)) {
                    columnValuesArray[1] = parentDQ_BATCHESRowByFK_STATISTICS_BATCHES[0];
                }
                if ((parentDQ_FIELDSRowByFK_STATISTICS_FIELDS != null)) {
                    columnValuesArray[2] = parentDQ_FIELDSRowByFK_STATISTICS_FIELDS[0];
                }
                rowDQ_CHECK_RESULTSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDQ_CHECK_RESULTSRow);
                return rowDQ_CHECK_RESULTSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_CHECK_RESULTSRow FindBydq_check_result_id(int dq_check_result_id) {
                return ((DQ_CHECK_RESULTSRow)(this.Rows.Find(new object[] {
                            dq_check_result_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DQ_CHECK_RESULTSDataTable cln = ((DQ_CHECK_RESULTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DQ_CHECK_RESULTSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndq_check_result_id = base.Columns["dq_check_result_id"];
                this.columnbatch_id = base.Columns["batch_id"];
                this.columnfield_id = base.Columns["field_id"];
                this.columndq_check_date = base.Columns["dq_check_date"];
                this.columnrow_nr = base.Columns["row_nr"];
                this.columncategory_nr = base.Columns["category_nr"];
                this.columnrow_nr_trend_check_ok = base.Columns["row_nr_trend_check_ok"];
                this.columncategory_nr_trend_check_ok = base.Columns["category_nr_trend_check_ok"];
                this.columnstdev_check_ok = base.Columns["stdev_check_ok"];
                this.columnuser_defined_check_ok = base.Columns["user_defined_check_ok"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndq_check_result_id = new global::System.Data.DataColumn("dq_check_result_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndq_check_result_id);
                this.columnbatch_id = new global::System.Data.DataColumn("batch_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_id);
                this.columnfield_id = new global::System.Data.DataColumn("field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfield_id);
                this.columndq_check_date = new global::System.Data.DataColumn("dq_check_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndq_check_date);
                this.columnrow_nr = new global::System.Data.DataColumn("row_nr", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrow_nr);
                this.columncategory_nr = new global::System.Data.DataColumn("category_nr", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_nr);
                this.columnrow_nr_trend_check_ok = new global::System.Data.DataColumn("row_nr_trend_check_ok", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrow_nr_trend_check_ok);
                this.columncategory_nr_trend_check_ok = new global::System.Data.DataColumn("category_nr_trend_check_ok", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_nr_trend_check_ok);
                this.columnstdev_check_ok = new global::System.Data.DataColumn("stdev_check_ok", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstdev_check_ok);
                this.columnuser_defined_check_ok = new global::System.Data.DataColumn("user_defined_check_ok", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_defined_check_ok);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndq_check_result_id}, true));
                this.columndq_check_result_id.AutoIncrement = true;
                this.columndq_check_result_id.AutoIncrementSeed = -1;
                this.columndq_check_result_id.AutoIncrementStep = -1;
                this.columndq_check_result_id.AllowDBNull = false;
                this.columndq_check_result_id.ReadOnly = true;
                this.columndq_check_result_id.Unique = true;
                this.columnbatch_id.AllowDBNull = false;
                this.columnfield_id.AllowDBNull = false;
                this.columndq_check_date.AllowDBNull = false;
                this.columnrow_nr.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_CHECK_RESULTSRow NewDQ_CHECK_RESULTSRow() {
                return ((DQ_CHECK_RESULTSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DQ_CHECK_RESULTSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DQ_CHECK_RESULTSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DQ_CHECK_RESULTSRowChanged != null)) {
                    this.DQ_CHECK_RESULTSRowChanged(this, new DQ_CHECK_RESULTSRowChangeEvent(((DQ_CHECK_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DQ_CHECK_RESULTSRowChanging != null)) {
                    this.DQ_CHECK_RESULTSRowChanging(this, new DQ_CHECK_RESULTSRowChangeEvent(((DQ_CHECK_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DQ_CHECK_RESULTSRowDeleted != null)) {
                    this.DQ_CHECK_RESULTSRowDeleted(this, new DQ_CHECK_RESULTSRowChangeEvent(((DQ_CHECK_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DQ_CHECK_RESULTSRowDeleting != null)) {
                    this.DQ_CHECK_RESULTSRowDeleting(this, new DQ_CHECK_RESULTSRowChangeEvent(((DQ_CHECK_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDQ_CHECK_RESULTSRow(DQ_CHECK_RESULTSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DQ_CHECK_RESULTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DQ_DATABASESDataTable : global::System.Data.TypedTableBase<DQ_DATABASESRow> {
            
            private global::System.Data.DataColumn columndatabase_id;
            
            private global::System.Data.DataColumn columndatabase_name;
            
            private global::System.Data.DataColumn columndatabase_active;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_DATABASESDataTable() {
                this.TableName = "DQ_DATABASES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_DATABASESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DQ_DATABASESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn database_idColumn {
                get {
                    return this.columndatabase_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn database_nameColumn {
                get {
                    return this.columndatabase_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn database_activeColumn {
                get {
                    return this.columndatabase_active;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_DATABASESRow this[int index] {
                get {
                    return ((DQ_DATABASESRow)(this.Rows[index]));
                }
            }
            
            public event DQ_DATABASESRowChangeEventHandler DQ_DATABASESRowChanging;
            
            public event DQ_DATABASESRowChangeEventHandler DQ_DATABASESRowChanged;
            
            public event DQ_DATABASESRowChangeEventHandler DQ_DATABASESRowDeleting;
            
            public event DQ_DATABASESRowChangeEventHandler DQ_DATABASESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDQ_DATABASESRow(DQ_DATABASESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_DATABASESRow AddDQ_DATABASESRow(string database_name, bool database_active) {
                DQ_DATABASESRow rowDQ_DATABASESRow = ((DQ_DATABASESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        database_name,
                        database_active};
                rowDQ_DATABASESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDQ_DATABASESRow);
                return rowDQ_DATABASESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_DATABASESRow FindBydatabase_id(int database_id) {
                return ((DQ_DATABASESRow)(this.Rows.Find(new object[] {
                            database_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DQ_DATABASESDataTable cln = ((DQ_DATABASESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DQ_DATABASESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndatabase_id = base.Columns["database_id"];
                this.columndatabase_name = base.Columns["database_name"];
                this.columndatabase_active = base.Columns["database_active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndatabase_id = new global::System.Data.DataColumn("database_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabase_id);
                this.columndatabase_name = new global::System.Data.DataColumn("database_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabase_name);
                this.columndatabase_active = new global::System.Data.DataColumn("database_active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabase_active);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndatabase_id}, true));
                this.columndatabase_id.AutoIncrement = true;
                this.columndatabase_id.AutoIncrementSeed = -1;
                this.columndatabase_id.AutoIncrementStep = -1;
                this.columndatabase_id.AllowDBNull = false;
                this.columndatabase_id.ReadOnly = true;
                this.columndatabase_id.Unique = true;
                this.columndatabase_name.AllowDBNull = false;
                this.columndatabase_name.MaxLength = 50;
                this.columndatabase_active.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_DATABASESRow NewDQ_DATABASESRow() {
                return ((DQ_DATABASESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DQ_DATABASESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DQ_DATABASESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DQ_DATABASESRowChanged != null)) {
                    this.DQ_DATABASESRowChanged(this, new DQ_DATABASESRowChangeEvent(((DQ_DATABASESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DQ_DATABASESRowChanging != null)) {
                    this.DQ_DATABASESRowChanging(this, new DQ_DATABASESRowChangeEvent(((DQ_DATABASESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DQ_DATABASESRowDeleted != null)) {
                    this.DQ_DATABASESRowDeleted(this, new DQ_DATABASESRowChangeEvent(((DQ_DATABASESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DQ_DATABASESRowDeleting != null)) {
                    this.DQ_DATABASESRowDeleting(this, new DQ_DATABASESRowChangeEvent(((DQ_DATABASESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDQ_DATABASESRow(DQ_DATABASESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DQ_DATABASESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DQ_FIELDSDataTable : global::System.Data.TypedTableBase<DQ_FIELDSRow> {
            
            private global::System.Data.DataColumn columnfield_id;
            
            private global::System.Data.DataColumn columntable_id;
            
            private global::System.Data.DataColumn columnfield_name;
            
            private global::System.Data.DataColumn columnscale;
            
            private global::System.Data.DataColumn columnrow_nr_trend;
            
            private global::System.Data.DataColumn columncategory_nr_trend;
            
            private global::System.Data.DataColumn columnstdev_corr_percent;
            
            private global::System.Data.DataColumn columnuser_defined_check_proc;
            
            private global::System.Data.DataColumn columnconsidered_history;
            
            private global::System.Data.DataColumn columnfield_active;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSDataTable() {
                this.TableName = "DQ_FIELDS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_FIELDSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DQ_FIELDSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn field_idColumn {
                get {
                    return this.columnfield_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn table_idColumn {
                get {
                    return this.columntable_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn field_nameColumn {
                get {
                    return this.columnfield_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scaleColumn {
                get {
                    return this.columnscale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn row_nr_trendColumn {
                get {
                    return this.columnrow_nr_trend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_nr_trendColumn {
                get {
                    return this.columncategory_nr_trend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stdev_corr_percentColumn {
                get {
                    return this.columnstdev_corr_percent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_defined_check_procColumn {
                get {
                    return this.columnuser_defined_check_proc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn considered_historyColumn {
                get {
                    return this.columnconsidered_history;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn field_activeColumn {
                get {
                    return this.columnfield_active;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSRow this[int index] {
                get {
                    return ((DQ_FIELDSRow)(this.Rows[index]));
                }
            }
            
            public event DQ_FIELDSRowChangeEventHandler DQ_FIELDSRowChanging;
            
            public event DQ_FIELDSRowChangeEventHandler DQ_FIELDSRowChanged;
            
            public event DQ_FIELDSRowChangeEventHandler DQ_FIELDSRowDeleting;
            
            public event DQ_FIELDSRowChangeEventHandler DQ_FIELDSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDQ_FIELDSRow(DQ_FIELDSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSRow AddDQ_FIELDSRow(int field_id, DQ_TABLESRow parentDQ_TABLESRowByFK_FIELDS_TABLES, string field_name, string scale, string row_nr_trend, string category_nr_trend, int stdev_corr_percent, string user_defined_check_proc, int considered_history, bool field_active) {
                DQ_FIELDSRow rowDQ_FIELDSRow = ((DQ_FIELDSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        field_id,
                        null,
                        field_name,
                        scale,
                        row_nr_trend,
                        category_nr_trend,
                        stdev_corr_percent,
                        user_defined_check_proc,
                        considered_history,
                        field_active};
                if ((parentDQ_TABLESRowByFK_FIELDS_TABLES != null)) {
                    columnValuesArray[1] = parentDQ_TABLESRowByFK_FIELDS_TABLES[0];
                }
                rowDQ_FIELDSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDQ_FIELDSRow);
                return rowDQ_FIELDSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSRow FindByfield_id(int field_id) {
                return ((DQ_FIELDSRow)(this.Rows.Find(new object[] {
                            field_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DQ_FIELDSDataTable cln = ((DQ_FIELDSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DQ_FIELDSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfield_id = base.Columns["field_id"];
                this.columntable_id = base.Columns["table_id"];
                this.columnfield_name = base.Columns["field_name"];
                this.columnscale = base.Columns["scale"];
                this.columnrow_nr_trend = base.Columns["row_nr_trend"];
                this.columncategory_nr_trend = base.Columns["category_nr_trend"];
                this.columnstdev_corr_percent = base.Columns["stdev_corr_percent"];
                this.columnuser_defined_check_proc = base.Columns["user_defined_check_proc"];
                this.columnconsidered_history = base.Columns["considered_history"];
                this.columnfield_active = base.Columns["field_active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfield_id = new global::System.Data.DataColumn("field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfield_id);
                this.columntable_id = new global::System.Data.DataColumn("table_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntable_id);
                this.columnfield_name = new global::System.Data.DataColumn("field_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfield_name);
                this.columnscale = new global::System.Data.DataColumn("scale", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscale);
                this.columnrow_nr_trend = new global::System.Data.DataColumn("row_nr_trend", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrow_nr_trend);
                this.columncategory_nr_trend = new global::System.Data.DataColumn("category_nr_trend", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_nr_trend);
                this.columnstdev_corr_percent = new global::System.Data.DataColumn("stdev_corr_percent", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstdev_corr_percent);
                this.columnuser_defined_check_proc = new global::System.Data.DataColumn("user_defined_check_proc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_defined_check_proc);
                this.columnconsidered_history = new global::System.Data.DataColumn("considered_history", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconsidered_history);
                this.columnfield_active = new global::System.Data.DataColumn("field_active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfield_active);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnfield_id}, true));
                this.columnfield_id.AllowDBNull = false;
                this.columnfield_id.Unique = true;
                this.columntable_id.AllowDBNull = false;
                this.columnfield_name.AllowDBNull = false;
                this.columnfield_name.MaxLength = 100;
                this.columnscale.AllowDBNull = false;
                this.columnscale.MaxLength = 1;
                this.columnrow_nr_trend.MaxLength = 3;
                this.columncategory_nr_trend.MaxLength = 3;
                this.columnuser_defined_check_proc.MaxLength = 100;
                this.columnconsidered_history.AllowDBNull = false;
                this.columnfield_active.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSRow NewDQ_FIELDSRow() {
                return ((DQ_FIELDSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DQ_FIELDSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DQ_FIELDSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DQ_FIELDSRowChanged != null)) {
                    this.DQ_FIELDSRowChanged(this, new DQ_FIELDSRowChangeEvent(((DQ_FIELDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DQ_FIELDSRowChanging != null)) {
                    this.DQ_FIELDSRowChanging(this, new DQ_FIELDSRowChangeEvent(((DQ_FIELDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DQ_FIELDSRowDeleted != null)) {
                    this.DQ_FIELDSRowDeleted(this, new DQ_FIELDSRowChangeEvent(((DQ_FIELDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DQ_FIELDSRowDeleting != null)) {
                    this.DQ_FIELDSRowDeleting(this, new DQ_FIELDSRowChangeEvent(((DQ_FIELDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDQ_FIELDSRow(DQ_FIELDSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DQ_FIELDSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DQ_TABLESDataTable : global::System.Data.TypedTableBase<DQ_TABLESRow> {
            
            private global::System.Data.DataColumn columntable_id;
            
            private global::System.Data.DataColumn columndatabase_id;
            
            private global::System.Data.DataColumn columntable_name;
            
            private global::System.Data.DataColumn columntable_active;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_TABLESDataTable() {
                this.TableName = "DQ_TABLES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_TABLESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DQ_TABLESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn table_idColumn {
                get {
                    return this.columntable_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn database_idColumn {
                get {
                    return this.columndatabase_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn table_nameColumn {
                get {
                    return this.columntable_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn table_activeColumn {
                get {
                    return this.columntable_active;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_TABLESRow this[int index] {
                get {
                    return ((DQ_TABLESRow)(this.Rows[index]));
                }
            }
            
            public event DQ_TABLESRowChangeEventHandler DQ_TABLESRowChanging;
            
            public event DQ_TABLESRowChangeEventHandler DQ_TABLESRowChanged;
            
            public event DQ_TABLESRowChangeEventHandler DQ_TABLESRowDeleting;
            
            public event DQ_TABLESRowChangeEventHandler DQ_TABLESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDQ_TABLESRow(DQ_TABLESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_TABLESRow AddDQ_TABLESRow(DQ_DATABASESRow parentDQ_DATABASESRowByFK_TABLES_DATABASES, string table_name, bool table_active) {
                DQ_TABLESRow rowDQ_TABLESRow = ((DQ_TABLESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        table_name,
                        table_active};
                if ((parentDQ_DATABASESRowByFK_TABLES_DATABASES != null)) {
                    columnValuesArray[1] = parentDQ_DATABASESRowByFK_TABLES_DATABASES[0];
                }
                rowDQ_TABLESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDQ_TABLESRow);
                return rowDQ_TABLESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_TABLESRow FindBytable_id(int table_id) {
                return ((DQ_TABLESRow)(this.Rows.Find(new object[] {
                            table_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DQ_TABLESDataTable cln = ((DQ_TABLESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DQ_TABLESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntable_id = base.Columns["table_id"];
                this.columndatabase_id = base.Columns["database_id"];
                this.columntable_name = base.Columns["table_name"];
                this.columntable_active = base.Columns["table_active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntable_id = new global::System.Data.DataColumn("table_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntable_id);
                this.columndatabase_id = new global::System.Data.DataColumn("database_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabase_id);
                this.columntable_name = new global::System.Data.DataColumn("table_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntable_name);
                this.columntable_active = new global::System.Data.DataColumn("table_active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntable_active);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntable_id}, true));
                this.columntable_id.AutoIncrement = true;
                this.columntable_id.AutoIncrementSeed = -1;
                this.columntable_id.AutoIncrementStep = -1;
                this.columntable_id.AllowDBNull = false;
                this.columntable_id.ReadOnly = true;
                this.columntable_id.Unique = true;
                this.columndatabase_id.AllowDBNull = false;
                this.columntable_name.AllowDBNull = false;
                this.columntable_name.MaxLength = 50;
                this.columntable_active.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_TABLESRow NewDQ_TABLESRow() {
                return ((DQ_TABLESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DQ_TABLESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DQ_TABLESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DQ_TABLESRowChanged != null)) {
                    this.DQ_TABLESRowChanged(this, new DQ_TABLESRowChangeEvent(((DQ_TABLESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DQ_TABLESRowChanging != null)) {
                    this.DQ_TABLESRowChanging(this, new DQ_TABLESRowChangeEvent(((DQ_TABLESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DQ_TABLESRowDeleted != null)) {
                    this.DQ_TABLESRowDeleted(this, new DQ_TABLESRowChangeEvent(((DQ_TABLESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DQ_TABLESRowDeleting != null)) {
                    this.DQ_TABLESRowDeleting(this, new DQ_TABLESRowChangeEvent(((DQ_TABLESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDQ_TABLESRow(DQ_TABLESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DQ_TABLESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class mylogDataTable : global::System.Data.TypedTableBase<mylogRow> {
            
            private global::System.Data.DataColumn columnlog_id;
            
            private global::System.Data.DataColumn columnlog_text;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mylogDataTable() {
                this.TableName = "mylog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mylogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected mylogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn log_idColumn {
                get {
                    return this.columnlog_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn log_textColumn {
                get {
                    return this.columnlog_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mylogRow this[int index] {
                get {
                    return ((mylogRow)(this.Rows[index]));
                }
            }
            
            public event mylogRowChangeEventHandler mylogRowChanging;
            
            public event mylogRowChangeEventHandler mylogRowChanged;
            
            public event mylogRowChangeEventHandler mylogRowDeleting;
            
            public event mylogRowChangeEventHandler mylogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmylogRow(mylogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mylogRow AddmylogRow(string log_text) {
                mylogRow rowmylogRow = ((mylogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        log_text};
                rowmylogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmylogRow);
                return rowmylogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                mylogDataTable cln = ((mylogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new mylogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlog_id = base.Columns["log_id"];
                this.columnlog_text = base.Columns["log_text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlog_id = new global::System.Data.DataColumn("log_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlog_id);
                this.columnlog_text = new global::System.Data.DataColumn("log_text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlog_text);
                this.columnlog_id.AutoIncrement = true;
                this.columnlog_id.AutoIncrementSeed = -1;
                this.columnlog_id.AutoIncrementStep = -1;
                this.columnlog_id.AllowDBNull = false;
                this.columnlog_id.ReadOnly = true;
                this.columnlog_text.MaxLength = 2000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mylogRow NewmylogRow() {
                return ((mylogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new mylogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(mylogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mylogRowChanged != null)) {
                    this.mylogRowChanged(this, new mylogRowChangeEvent(((mylogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mylogRowChanging != null)) {
                    this.mylogRowChanging(this, new mylogRowChangeEvent(((mylogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mylogRowDeleted != null)) {
                    this.mylogRowDeleted(this, new mylogRowChangeEvent(((mylogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mylogRowDeleting != null)) {
                    this.mylogRowDeleting(this, new mylogRowChangeEvent(((mylogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemylogRow(mylogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "mylogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class V_DQ_BATCH_LEVEL_RESULTSDataTable : global::System.Data.TypedTableBase<V_DQ_BATCH_LEVEL_RESULTSRow> {
            
            private global::System.Data.DataColumn columnbatch_log_id;
            
            private global::System.Data.DataColumn columnstart_time;
            
            private global::System.Data.DataColumn columnend_time;
            
            private global::System.Data.DataColumn columnbatch_check_ok;
            
            private global::System.Data.DataColumn columnbatch_id;
            
            private global::System.Data.DataColumn columnbatch_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_BATCH_LEVEL_RESULTSDataTable() {
                this.TableName = "V_DQ_BATCH_LEVEL_RESULTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_DQ_BATCH_LEVEL_RESULTSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected V_DQ_BATCH_LEVEL_RESULTSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_log_idColumn {
                get {
                    return this.columnbatch_log_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn start_timeColumn {
                get {
                    return this.columnstart_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn end_timeColumn {
                get {
                    return this.columnend_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_check_okColumn {
                get {
                    return this.columnbatch_check_ok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_idColumn {
                get {
                    return this.columnbatch_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_nameColumn {
                get {
                    return this.columnbatch_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_BATCH_LEVEL_RESULTSRow this[int index] {
                get {
                    return ((V_DQ_BATCH_LEVEL_RESULTSRow)(this.Rows[index]));
                }
            }
            
            public event V_DQ_BATCH_LEVEL_RESULTSRowChangeEventHandler V_DQ_BATCH_LEVEL_RESULTSRowChanging;
            
            public event V_DQ_BATCH_LEVEL_RESULTSRowChangeEventHandler V_DQ_BATCH_LEVEL_RESULTSRowChanged;
            
            public event V_DQ_BATCH_LEVEL_RESULTSRowChangeEventHandler V_DQ_BATCH_LEVEL_RESULTSRowDeleting;
            
            public event V_DQ_BATCH_LEVEL_RESULTSRowChangeEventHandler V_DQ_BATCH_LEVEL_RESULTSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddV_DQ_BATCH_LEVEL_RESULTSRow(V_DQ_BATCH_LEVEL_RESULTSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_BATCH_LEVEL_RESULTSRow AddV_DQ_BATCH_LEVEL_RESULTSRow(int batch_log_id, System.DateTime start_time, System.DateTime end_time, bool batch_check_ok, int batch_id, string batch_name) {
                V_DQ_BATCH_LEVEL_RESULTSRow rowV_DQ_BATCH_LEVEL_RESULTSRow = ((V_DQ_BATCH_LEVEL_RESULTSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        batch_log_id,
                        start_time,
                        end_time,
                        batch_check_ok,
                        batch_id,
                        batch_name};
                rowV_DQ_BATCH_LEVEL_RESULTSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowV_DQ_BATCH_LEVEL_RESULTSRow);
                return rowV_DQ_BATCH_LEVEL_RESULTSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_BATCH_LEVEL_RESULTSRow FindBybatch_log_idbatch_id(int batch_log_id, int batch_id) {
                return ((V_DQ_BATCH_LEVEL_RESULTSRow)(this.Rows.Find(new object[] {
                            batch_log_id,
                            batch_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                V_DQ_BATCH_LEVEL_RESULTSDataTable cln = ((V_DQ_BATCH_LEVEL_RESULTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new V_DQ_BATCH_LEVEL_RESULTSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbatch_log_id = base.Columns["batch_log_id"];
                this.columnstart_time = base.Columns["start_time"];
                this.columnend_time = base.Columns["end_time"];
                this.columnbatch_check_ok = base.Columns["batch_check_ok"];
                this.columnbatch_id = base.Columns["batch_id"];
                this.columnbatch_name = base.Columns["batch_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbatch_log_id = new global::System.Data.DataColumn("batch_log_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_log_id);
                this.columnstart_time = new global::System.Data.DataColumn("start_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart_time);
                this.columnend_time = new global::System.Data.DataColumn("end_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnend_time);
                this.columnbatch_check_ok = new global::System.Data.DataColumn("batch_check_ok", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_check_ok);
                this.columnbatch_id = new global::System.Data.DataColumn("batch_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_id);
                this.columnbatch_name = new global::System.Data.DataColumn("batch_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbatch_log_id,
                                this.columnbatch_id}, true));
                this.columnbatch_log_id.AllowDBNull = false;
                this.columnstart_time.AllowDBNull = false;
                this.columnbatch_id.AllowDBNull = false;
                this.columnbatch_name.AllowDBNull = false;
                this.columnbatch_name.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_BATCH_LEVEL_RESULTSRow NewV_DQ_BATCH_LEVEL_RESULTSRow() {
                return ((V_DQ_BATCH_LEVEL_RESULTSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new V_DQ_BATCH_LEVEL_RESULTSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(V_DQ_BATCH_LEVEL_RESULTSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.V_DQ_BATCH_LEVEL_RESULTSRowChanged != null)) {
                    this.V_DQ_BATCH_LEVEL_RESULTSRowChanged(this, new V_DQ_BATCH_LEVEL_RESULTSRowChangeEvent(((V_DQ_BATCH_LEVEL_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.V_DQ_BATCH_LEVEL_RESULTSRowChanging != null)) {
                    this.V_DQ_BATCH_LEVEL_RESULTSRowChanging(this, new V_DQ_BATCH_LEVEL_RESULTSRowChangeEvent(((V_DQ_BATCH_LEVEL_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.V_DQ_BATCH_LEVEL_RESULTSRowDeleted != null)) {
                    this.V_DQ_BATCH_LEVEL_RESULTSRowDeleted(this, new V_DQ_BATCH_LEVEL_RESULTSRowChangeEvent(((V_DQ_BATCH_LEVEL_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.V_DQ_BATCH_LEVEL_RESULTSRowDeleting != null)) {
                    this.V_DQ_BATCH_LEVEL_RESULTSRowDeleting(this, new V_DQ_BATCH_LEVEL_RESULTSRowChangeEvent(((V_DQ_BATCH_LEVEL_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveV_DQ_BATCH_LEVEL_RESULTSRow(V_DQ_BATCH_LEVEL_RESULTSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "V_DQ_BATCH_LEVEL_RESULTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class V_DQ_FIELD_LEVEL_RESULTSDataTable : global::System.Data.TypedTableBase<V_DQ_FIELD_LEVEL_RESULTSRow> {
            
            private global::System.Data.DataColumn columndq_check_result_id;
            
            private global::System.Data.DataColumn columnbatch_id;
            
            private global::System.Data.DataColumn columnfield_id;
            
            private global::System.Data.DataColumn columndq_check_date;
            
            private global::System.Data.DataColumn columnrow_nr;
            
            private global::System.Data.DataColumn columncategory_nr;
            
            private global::System.Data.DataColumn columnrow_nr_trend_check_ok;
            
            private global::System.Data.DataColumn columncategory_nr_trend_check_ok;
            
            private global::System.Data.DataColumn columnstdev_check_ok;
            
            private global::System.Data.DataColumn columnuser_defined_check_ok;
            
            private global::System.Data.DataColumn columnbatch_name;
            
            private global::System.Data.DataColumn columndatabase_name;
            
            private global::System.Data.DataColumn columntable_name;
            
            private global::System.Data.DataColumn columnfield_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_FIELD_LEVEL_RESULTSDataTable() {
                this.TableName = "V_DQ_FIELD_LEVEL_RESULTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_DQ_FIELD_LEVEL_RESULTSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected V_DQ_FIELD_LEVEL_RESULTSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dq_check_result_idColumn {
                get {
                    return this.columndq_check_result_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_idColumn {
                get {
                    return this.columnbatch_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn field_idColumn {
                get {
                    return this.columnfield_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dq_check_dateColumn {
                get {
                    return this.columndq_check_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn row_nrColumn {
                get {
                    return this.columnrow_nr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_nrColumn {
                get {
                    return this.columncategory_nr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn row_nr_trend_check_okColumn {
                get {
                    return this.columnrow_nr_trend_check_ok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_nr_trend_check_okColumn {
                get {
                    return this.columncategory_nr_trend_check_ok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stdev_check_okColumn {
                get {
                    return this.columnstdev_check_ok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_defined_check_okColumn {
                get {
                    return this.columnuser_defined_check_ok;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_nameColumn {
                get {
                    return this.columnbatch_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn database_nameColumn {
                get {
                    return this.columndatabase_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn table_nameColumn {
                get {
                    return this.columntable_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn field_nameColumn {
                get {
                    return this.columnfield_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_FIELD_LEVEL_RESULTSRow this[int index] {
                get {
                    return ((V_DQ_FIELD_LEVEL_RESULTSRow)(this.Rows[index]));
                }
            }
            
            public event V_DQ_FIELD_LEVEL_RESULTSRowChangeEventHandler V_DQ_FIELD_LEVEL_RESULTSRowChanging;
            
            public event V_DQ_FIELD_LEVEL_RESULTSRowChangeEventHandler V_DQ_FIELD_LEVEL_RESULTSRowChanged;
            
            public event V_DQ_FIELD_LEVEL_RESULTSRowChangeEventHandler V_DQ_FIELD_LEVEL_RESULTSRowDeleting;
            
            public event V_DQ_FIELD_LEVEL_RESULTSRowChangeEventHandler V_DQ_FIELD_LEVEL_RESULTSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddV_DQ_FIELD_LEVEL_RESULTSRow(V_DQ_FIELD_LEVEL_RESULTSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_FIELD_LEVEL_RESULTSRow AddV_DQ_FIELD_LEVEL_RESULTSRow(int batch_id, int field_id, System.DateTime dq_check_date, long row_nr, long category_nr, bool row_nr_trend_check_ok, bool category_nr_trend_check_ok, bool stdev_check_ok, bool user_defined_check_ok, string batch_name, string database_name, string table_name, string field_name) {
                V_DQ_FIELD_LEVEL_RESULTSRow rowV_DQ_FIELD_LEVEL_RESULTSRow = ((V_DQ_FIELD_LEVEL_RESULTSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        batch_id,
                        field_id,
                        dq_check_date,
                        row_nr,
                        category_nr,
                        row_nr_trend_check_ok,
                        category_nr_trend_check_ok,
                        stdev_check_ok,
                        user_defined_check_ok,
                        batch_name,
                        database_name,
                        table_name,
                        field_name};
                rowV_DQ_FIELD_LEVEL_RESULTSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowV_DQ_FIELD_LEVEL_RESULTSRow);
                return rowV_DQ_FIELD_LEVEL_RESULTSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_FIELD_LEVEL_RESULTSRow FindBydq_check_result_id(int dq_check_result_id) {
                return ((V_DQ_FIELD_LEVEL_RESULTSRow)(this.Rows.Find(new object[] {
                            dq_check_result_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                V_DQ_FIELD_LEVEL_RESULTSDataTable cln = ((V_DQ_FIELD_LEVEL_RESULTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new V_DQ_FIELD_LEVEL_RESULTSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndq_check_result_id = base.Columns["dq_check_result_id"];
                this.columnbatch_id = base.Columns["batch_id"];
                this.columnfield_id = base.Columns["field_id"];
                this.columndq_check_date = base.Columns["dq_check_date"];
                this.columnrow_nr = base.Columns["row_nr"];
                this.columncategory_nr = base.Columns["category_nr"];
                this.columnrow_nr_trend_check_ok = base.Columns["row_nr_trend_check_ok"];
                this.columncategory_nr_trend_check_ok = base.Columns["category_nr_trend_check_ok"];
                this.columnstdev_check_ok = base.Columns["stdev_check_ok"];
                this.columnuser_defined_check_ok = base.Columns["user_defined_check_ok"];
                this.columnbatch_name = base.Columns["batch_name"];
                this.columndatabase_name = base.Columns["database_name"];
                this.columntable_name = base.Columns["table_name"];
                this.columnfield_name = base.Columns["field_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndq_check_result_id = new global::System.Data.DataColumn("dq_check_result_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndq_check_result_id);
                this.columnbatch_id = new global::System.Data.DataColumn("batch_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_id);
                this.columnfield_id = new global::System.Data.DataColumn("field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfield_id);
                this.columndq_check_date = new global::System.Data.DataColumn("dq_check_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndq_check_date);
                this.columnrow_nr = new global::System.Data.DataColumn("row_nr", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrow_nr);
                this.columncategory_nr = new global::System.Data.DataColumn("category_nr", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_nr);
                this.columnrow_nr_trend_check_ok = new global::System.Data.DataColumn("row_nr_trend_check_ok", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrow_nr_trend_check_ok);
                this.columncategory_nr_trend_check_ok = new global::System.Data.DataColumn("category_nr_trend_check_ok", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_nr_trend_check_ok);
                this.columnstdev_check_ok = new global::System.Data.DataColumn("stdev_check_ok", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstdev_check_ok);
                this.columnuser_defined_check_ok = new global::System.Data.DataColumn("user_defined_check_ok", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_defined_check_ok);
                this.columnbatch_name = new global::System.Data.DataColumn("batch_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_name);
                this.columndatabase_name = new global::System.Data.DataColumn("database_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabase_name);
                this.columntable_name = new global::System.Data.DataColumn("table_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntable_name);
                this.columnfield_name = new global::System.Data.DataColumn("field_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfield_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndq_check_result_id}, true));
                this.columndq_check_result_id.AutoIncrement = true;
                this.columndq_check_result_id.AutoIncrementSeed = -1;
                this.columndq_check_result_id.AutoIncrementStep = -1;
                this.columndq_check_result_id.AllowDBNull = false;
                this.columndq_check_result_id.ReadOnly = true;
                this.columndq_check_result_id.Unique = true;
                this.columnbatch_id.AllowDBNull = false;
                this.columnfield_id.AllowDBNull = false;
                this.columndq_check_date.AllowDBNull = false;
                this.columnrow_nr.AllowDBNull = false;
                this.columnbatch_name.AllowDBNull = false;
                this.columnbatch_name.MaxLength = 50;
                this.columndatabase_name.AllowDBNull = false;
                this.columndatabase_name.MaxLength = 50;
                this.columntable_name.AllowDBNull = false;
                this.columntable_name.MaxLength = 50;
                this.columnfield_name.AllowDBNull = false;
                this.columnfield_name.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_FIELD_LEVEL_RESULTSRow NewV_DQ_FIELD_LEVEL_RESULTSRow() {
                return ((V_DQ_FIELD_LEVEL_RESULTSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new V_DQ_FIELD_LEVEL_RESULTSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(V_DQ_FIELD_LEVEL_RESULTSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.V_DQ_FIELD_LEVEL_RESULTSRowChanged != null)) {
                    this.V_DQ_FIELD_LEVEL_RESULTSRowChanged(this, new V_DQ_FIELD_LEVEL_RESULTSRowChangeEvent(((V_DQ_FIELD_LEVEL_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.V_DQ_FIELD_LEVEL_RESULTSRowChanging != null)) {
                    this.V_DQ_FIELD_LEVEL_RESULTSRowChanging(this, new V_DQ_FIELD_LEVEL_RESULTSRowChangeEvent(((V_DQ_FIELD_LEVEL_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.V_DQ_FIELD_LEVEL_RESULTSRowDeleted != null)) {
                    this.V_DQ_FIELD_LEVEL_RESULTSRowDeleted(this, new V_DQ_FIELD_LEVEL_RESULTSRowChangeEvent(((V_DQ_FIELD_LEVEL_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.V_DQ_FIELD_LEVEL_RESULTSRowDeleting != null)) {
                    this.V_DQ_FIELD_LEVEL_RESULTSRowDeleting(this, new V_DQ_FIELD_LEVEL_RESULTSRowChangeEvent(((V_DQ_FIELD_LEVEL_RESULTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveV_DQ_FIELD_LEVEL_RESULTSRow(V_DQ_FIELD_LEVEL_RESULTSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "V_DQ_FIELD_LEVEL_RESULTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class V_DQ_MASTERDataTable : global::System.Data.TypedTableBase<V_DQ_MASTERRow> {
            
            private global::System.Data.DataColumn columnfield_id;
            
            private global::System.Data.DataColumn columnbatch_id;
            
            private global::System.Data.DataColumn columntable_id;
            
            private global::System.Data.DataColumn columndatabase_id;
            
            private global::System.Data.DataColumn columnbatch_name;
            
            private global::System.Data.DataColumn columntable_name;
            
            private global::System.Data.DataColumn columndatabase_name;
            
            private global::System.Data.DataColumn columnfield_name;
            
            private global::System.Data.DataColumn columnscale;
            
            private global::System.Data.DataColumn columnrow_nr_trend;
            
            private global::System.Data.DataColumn columncategory_nr_trend;
            
            private global::System.Data.DataColumn columnstdev_corr_percent;
            
            private global::System.Data.DataColumn columnuser_defined_check_proc;
            
            private global::System.Data.DataColumn columnconsidered_history;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_MASTERDataTable() {
                this.TableName = "V_DQ_MASTER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_DQ_MASTERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected V_DQ_MASTERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn field_idColumn {
                get {
                    return this.columnfield_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_idColumn {
                get {
                    return this.columnbatch_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn table_idColumn {
                get {
                    return this.columntable_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn database_idColumn {
                get {
                    return this.columndatabase_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn batch_nameColumn {
                get {
                    return this.columnbatch_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn table_nameColumn {
                get {
                    return this.columntable_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn database_nameColumn {
                get {
                    return this.columndatabase_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn field_nameColumn {
                get {
                    return this.columnfield_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scaleColumn {
                get {
                    return this.columnscale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn row_nr_trendColumn {
                get {
                    return this.columnrow_nr_trend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_nr_trendColumn {
                get {
                    return this.columncategory_nr_trend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stdev_corr_percentColumn {
                get {
                    return this.columnstdev_corr_percent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_defined_check_procColumn {
                get {
                    return this.columnuser_defined_check_proc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn considered_historyColumn {
                get {
                    return this.columnconsidered_history;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_MASTERRow this[int index] {
                get {
                    return ((V_DQ_MASTERRow)(this.Rows[index]));
                }
            }
            
            public event V_DQ_MASTERRowChangeEventHandler V_DQ_MASTERRowChanging;
            
            public event V_DQ_MASTERRowChangeEventHandler V_DQ_MASTERRowChanged;
            
            public event V_DQ_MASTERRowChangeEventHandler V_DQ_MASTERRowDeleting;
            
            public event V_DQ_MASTERRowChangeEventHandler V_DQ_MASTERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddV_DQ_MASTERRow(V_DQ_MASTERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_MASTERRow AddV_DQ_MASTERRow(int field_id, int batch_id, int table_id, int database_id, string batch_name, string table_name, string database_name, string field_name, string scale, string row_nr_trend, string category_nr_trend, int stdev_corr_percent, string user_defined_check_proc, int considered_history) {
                V_DQ_MASTERRow rowV_DQ_MASTERRow = ((V_DQ_MASTERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        field_id,
                        batch_id,
                        table_id,
                        database_id,
                        batch_name,
                        table_name,
                        database_name,
                        field_name,
                        scale,
                        row_nr_trend,
                        category_nr_trend,
                        stdev_corr_percent,
                        user_defined_check_proc,
                        considered_history};
                rowV_DQ_MASTERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowV_DQ_MASTERRow);
                return rowV_DQ_MASTERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                V_DQ_MASTERDataTable cln = ((V_DQ_MASTERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new V_DQ_MASTERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfield_id = base.Columns["field_id"];
                this.columnbatch_id = base.Columns["batch_id"];
                this.columntable_id = base.Columns["table_id"];
                this.columndatabase_id = base.Columns["database_id"];
                this.columnbatch_name = base.Columns["batch_name"];
                this.columntable_name = base.Columns["table_name"];
                this.columndatabase_name = base.Columns["database_name"];
                this.columnfield_name = base.Columns["field_name"];
                this.columnscale = base.Columns["scale"];
                this.columnrow_nr_trend = base.Columns["row_nr_trend"];
                this.columncategory_nr_trend = base.Columns["category_nr_trend"];
                this.columnstdev_corr_percent = base.Columns["stdev_corr_percent"];
                this.columnuser_defined_check_proc = base.Columns["user_defined_check_proc"];
                this.columnconsidered_history = base.Columns["considered_history"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfield_id = new global::System.Data.DataColumn("field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfield_id);
                this.columnbatch_id = new global::System.Data.DataColumn("batch_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_id);
                this.columntable_id = new global::System.Data.DataColumn("table_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntable_id);
                this.columndatabase_id = new global::System.Data.DataColumn("database_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabase_id);
                this.columnbatch_name = new global::System.Data.DataColumn("batch_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbatch_name);
                this.columntable_name = new global::System.Data.DataColumn("table_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntable_name);
                this.columndatabase_name = new global::System.Data.DataColumn("database_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabase_name);
                this.columnfield_name = new global::System.Data.DataColumn("field_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfield_name);
                this.columnscale = new global::System.Data.DataColumn("scale", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscale);
                this.columnrow_nr_trend = new global::System.Data.DataColumn("row_nr_trend", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrow_nr_trend);
                this.columncategory_nr_trend = new global::System.Data.DataColumn("category_nr_trend", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_nr_trend);
                this.columnstdev_corr_percent = new global::System.Data.DataColumn("stdev_corr_percent", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstdev_corr_percent);
                this.columnuser_defined_check_proc = new global::System.Data.DataColumn("user_defined_check_proc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_defined_check_proc);
                this.columnconsidered_history = new global::System.Data.DataColumn("considered_history", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconsidered_history);
                this.columnfield_id.AllowDBNull = false;
                this.columnbatch_id.AllowDBNull = false;
                this.columntable_id.AllowDBNull = false;
                this.columndatabase_id.AllowDBNull = false;
                this.columnbatch_name.AllowDBNull = false;
                this.columnbatch_name.MaxLength = 50;
                this.columntable_name.AllowDBNull = false;
                this.columntable_name.MaxLength = 50;
                this.columndatabase_name.AllowDBNull = false;
                this.columndatabase_name.MaxLength = 50;
                this.columnfield_name.AllowDBNull = false;
                this.columnfield_name.MaxLength = 100;
                this.columnscale.AllowDBNull = false;
                this.columnscale.MaxLength = 1;
                this.columnrow_nr_trend.MaxLength = 3;
                this.columncategory_nr_trend.MaxLength = 3;
                this.columnuser_defined_check_proc.MaxLength = 100;
                this.columnconsidered_history.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_MASTERRow NewV_DQ_MASTERRow() {
                return ((V_DQ_MASTERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new V_DQ_MASTERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(V_DQ_MASTERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.V_DQ_MASTERRowChanged != null)) {
                    this.V_DQ_MASTERRowChanged(this, new V_DQ_MASTERRowChangeEvent(((V_DQ_MASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.V_DQ_MASTERRowChanging != null)) {
                    this.V_DQ_MASTERRowChanging(this, new V_DQ_MASTERRowChangeEvent(((V_DQ_MASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.V_DQ_MASTERRowDeleted != null)) {
                    this.V_DQ_MASTERRowDeleted(this, new V_DQ_MASTERRowChangeEvent(((V_DQ_MASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.V_DQ_MASTERRowDeleting != null)) {
                    this.V_DQ_MASTERRowDeleting(this, new V_DQ_MASTERRowChangeEvent(((V_DQ_MASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveV_DQ_MASTERRow(V_DQ_MASTERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AF_TESTDataSet ds = new AF_TESTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "V_DQ_MASTERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DQ_BATCH_ERROR_DETAILSRow : global::System.Data.DataRow {
            
            private DQ_BATCH_ERROR_DETAILSDataTable tableDQ_BATCH_ERROR_DETAILS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_BATCH_ERROR_DETAILSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDQ_BATCH_ERROR_DETAILS = ((DQ_BATCH_ERROR_DETAILSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_log_id {
                get {
                    return ((int)(this[this.tableDQ_BATCH_ERROR_DETAILS.batch_log_idColumn]));
                }
                set {
                    this[this.tableDQ_BATCH_ERROR_DETAILS.batch_log_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_log_detail_id {
                get {
                    return ((int)(this[this.tableDQ_BATCH_ERROR_DETAILS.batch_log_detail_idColumn]));
                }
                set {
                    this[this.tableDQ_BATCH_ERROR_DETAILS.batch_log_detail_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int field_id {
                get {
                    return ((int)(this[this.tableDQ_BATCH_ERROR_DETAILS.field_idColumn]));
                }
                set {
                    this[this.tableDQ_BATCH_ERROR_DETAILS.field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mssql_error_number {
                get {
                    try {
                        return ((int)(this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_numberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mssql_error_number\' in table \'DQ_BATCH_ERROR_DETAILS\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mssql_error_severity {
                get {
                    try {
                        return ((int)(this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_severityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mssql_error_severity\' in table \'DQ_BATCH_ERROR_DETAILS\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_severityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mssql_error_state {
                get {
                    try {
                        return ((int)(this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_stateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mssql_error_state\' in table \'DQ_BATCH_ERROR_DETAILS\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_stateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mssql_error_procedure {
                get {
                    try {
                        return ((string)(this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_procedureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mssql_error_procedure\' in table \'DQ_BATCH_ERROR_DETAILS\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_procedureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mssql_error_line {
                get {
                    try {
                        return ((int)(this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_lineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mssql_error_line\' in table \'DQ_BATCH_ERROR_DETAILS\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_lineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mssql_error_message {
                get {
                    try {
                        return ((string)(this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_messageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mssql_error_message\' in table \'DQ_BATCH_ERROR_DETAILS\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_messageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSRow DQ_FIELDSRow {
                get {
                    return ((DQ_FIELDSRow)(this.GetParentRow(this.Table.ParentRelations["FK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismssql_error_numberNull() {
                return this.IsNull(this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_numberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmssql_error_numberNull() {
                this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_numberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismssql_error_severityNull() {
                return this.IsNull(this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_severityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmssql_error_severityNull() {
                this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_severityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismssql_error_stateNull() {
                return this.IsNull(this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_stateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmssql_error_stateNull() {
                this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_stateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismssql_error_procedureNull() {
                return this.IsNull(this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_procedureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmssql_error_procedureNull() {
                this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_procedureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismssql_error_lineNull() {
                return this.IsNull(this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_lineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmssql_error_lineNull() {
                this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_lineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismssql_error_messageNull() {
                return this.IsNull(this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_messageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmssql_error_messageNull() {
                this[this.tableDQ_BATCH_ERROR_DETAILS.mssql_error_messageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DQ_BATCH_LOGRow : global::System.Data.DataRow {
            
            private DQ_BATCH_LOGDataTable tableDQ_BATCH_LOG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_BATCH_LOGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDQ_BATCH_LOG = ((DQ_BATCH_LOGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_log_id {
                get {
                    return ((int)(this[this.tableDQ_BATCH_LOG.batch_log_idColumn]));
                }
                set {
                    this[this.tableDQ_BATCH_LOG.batch_log_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_id {
                get {
                    return ((int)(this[this.tableDQ_BATCH_LOG.batch_idColumn]));
                }
                set {
                    this[this.tableDQ_BATCH_LOG.batch_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime start_time {
                get {
                    return ((global::System.DateTime)(this[this.tableDQ_BATCH_LOG.start_timeColumn]));
                }
                set {
                    this[this.tableDQ_BATCH_LOG.start_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime end_time {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDQ_BATCH_LOG.end_timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'end_time\' in table \'DQ_BATCH_LOG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_BATCH_LOG.end_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool batch_check_ok {
                get {
                    try {
                        return ((bool)(this[this.tableDQ_BATCH_LOG.batch_check_okColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'batch_check_ok\' in table \'DQ_BATCH_LOG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_BATCH_LOG.batch_check_okColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHESRow DQ_BATCHESRow {
                get {
                    return ((DQ_BATCHESRow)(this.GetParentRow(this.Table.ParentRelations["FK_DQ_BATCH_LOG_DQ_BATCHES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DQ_BATCH_LOG_DQ_BATCHES"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isend_timeNull() {
                return this.IsNull(this.tableDQ_BATCH_LOG.end_timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setend_timeNull() {
                this[this.tableDQ_BATCH_LOG.end_timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbatch_check_okNull() {
                return this.IsNull(this.tableDQ_BATCH_LOG.batch_check_okColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbatch_check_okNull() {
                this[this.tableDQ_BATCH_LOG.batch_check_okColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DQ_BATCHESRow : global::System.Data.DataRow {
            
            private DQ_BATCHESDataTable tableDQ_BATCHES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_BATCHESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDQ_BATCHES = ((DQ_BATCHESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_id {
                get {
                    return ((int)(this[this.tableDQ_BATCHES.batch_idColumn]));
                }
                set {
                    this[this.tableDQ_BATCHES.batch_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string batch_name {
                get {
                    return ((string)(this[this.tableDQ_BATCHES.batch_nameColumn]));
                }
                set {
                    this[this.tableDQ_BATCHES.batch_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool batch_active {
                get {
                    return ((bool)(this[this.tableDQ_BATCHES.batch_activeColumn]));
                }
                set {
                    this[this.tableDQ_BATCHES.batch_activeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_LOGRow[] GetDQ_BATCH_LOGRows() {
                if ((this.Table.ChildRelations["FK_DQ_BATCH_LOG_DQ_BATCHES"] == null)) {
                    return new DQ_BATCH_LOGRow[0];
                }
                else {
                    return ((DQ_BATCH_LOGRow[])(base.GetChildRows(this.Table.ChildRelations["FK_DQ_BATCH_LOG_DQ_BATCHES"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHES_FIELDSRow[] GetDQ_BATCHES_FIELDSRows() {
                if ((this.Table.ChildRelations["FK_BATCHES_FIELDS_BATCHES"] == null)) {
                    return new DQ_BATCHES_FIELDSRow[0];
                }
                else {
                    return ((DQ_BATCHES_FIELDSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_BATCHES_FIELDS_BATCHES"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_CHECK_RESULTSRow[] GetDQ_CHECK_RESULTSRows() {
                if ((this.Table.ChildRelations["FK_STATISTICS_BATCHES"] == null)) {
                    return new DQ_CHECK_RESULTSRow[0];
                }
                else {
                    return ((DQ_CHECK_RESULTSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_STATISTICS_BATCHES"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DQ_BATCHES_FIELDSRow : global::System.Data.DataRow {
            
            private DQ_BATCHES_FIELDSDataTable tableDQ_BATCHES_FIELDS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_BATCHES_FIELDSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDQ_BATCHES_FIELDS = ((DQ_BATCHES_FIELDSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_id {
                get {
                    return ((int)(this[this.tableDQ_BATCHES_FIELDS.batch_idColumn]));
                }
                set {
                    this[this.tableDQ_BATCHES_FIELDS.batch_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int field_id {
                get {
                    return ((int)(this[this.tableDQ_BATCHES_FIELDS.field_idColumn]));
                }
                set {
                    this[this.tableDQ_BATCHES_FIELDS.field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHESRow DQ_BATCHESRow {
                get {
                    return ((DQ_BATCHESRow)(this.GetParentRow(this.Table.ParentRelations["FK_BATCHES_FIELDS_BATCHES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_BATCHES_FIELDS_BATCHES"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSRow DQ_FIELDSRow {
                get {
                    return ((DQ_FIELDSRow)(this.GetParentRow(this.Table.ParentRelations["FK_BATCHES_FIELDS_FIELDS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_BATCHES_FIELDS_FIELDS"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DQ_CHECK_RESULTSRow : global::System.Data.DataRow {
            
            private DQ_CHECK_RESULTSDataTable tableDQ_CHECK_RESULTS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_CHECK_RESULTSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDQ_CHECK_RESULTS = ((DQ_CHECK_RESULTSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dq_check_result_id {
                get {
                    return ((int)(this[this.tableDQ_CHECK_RESULTS.dq_check_result_idColumn]));
                }
                set {
                    this[this.tableDQ_CHECK_RESULTS.dq_check_result_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_id {
                get {
                    return ((int)(this[this.tableDQ_CHECK_RESULTS.batch_idColumn]));
                }
                set {
                    this[this.tableDQ_CHECK_RESULTS.batch_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int field_id {
                get {
                    return ((int)(this[this.tableDQ_CHECK_RESULTS.field_idColumn]));
                }
                set {
                    this[this.tableDQ_CHECK_RESULTS.field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dq_check_date {
                get {
                    return ((global::System.DateTime)(this[this.tableDQ_CHECK_RESULTS.dq_check_dateColumn]));
                }
                set {
                    this[this.tableDQ_CHECK_RESULTS.dq_check_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long row_nr {
                get {
                    return ((long)(this[this.tableDQ_CHECK_RESULTS.row_nrColumn]));
                }
                set {
                    this[this.tableDQ_CHECK_RESULTS.row_nrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long category_nr {
                get {
                    try {
                        return ((long)(this[this.tableDQ_CHECK_RESULTS.category_nrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_nr\' in table \'DQ_CHECK_RESULTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_CHECK_RESULTS.category_nrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool row_nr_trend_check_ok {
                get {
                    try {
                        return ((bool)(this[this.tableDQ_CHECK_RESULTS.row_nr_trend_check_okColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'row_nr_trend_check_ok\' in table \'DQ_CHECK_RESULTS\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDQ_CHECK_RESULTS.row_nr_trend_check_okColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool category_nr_trend_check_ok {
                get {
                    try {
                        return ((bool)(this[this.tableDQ_CHECK_RESULTS.category_nr_trend_check_okColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_nr_trend_check_ok\' in table \'DQ_CHECK_RESULTS\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_CHECK_RESULTS.category_nr_trend_check_okColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool stdev_check_ok {
                get {
                    try {
                        return ((bool)(this[this.tableDQ_CHECK_RESULTS.stdev_check_okColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stdev_check_ok\' in table \'DQ_CHECK_RESULTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_CHECK_RESULTS.stdev_check_okColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool user_defined_check_ok {
                get {
                    try {
                        return ((bool)(this[this.tableDQ_CHECK_RESULTS.user_defined_check_okColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_defined_check_ok\' in table \'DQ_CHECK_RESULTS\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDQ_CHECK_RESULTS.user_defined_check_okColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHESRow DQ_BATCHESRow {
                get {
                    return ((DQ_BATCHESRow)(this.GetParentRow(this.Table.ParentRelations["FK_STATISTICS_BATCHES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_STATISTICS_BATCHES"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSRow DQ_FIELDSRow {
                get {
                    return ((DQ_FIELDSRow)(this.GetParentRow(this.Table.ParentRelations["FK_STATISTICS_FIELDS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_STATISTICS_FIELDS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_nrNull() {
                return this.IsNull(this.tableDQ_CHECK_RESULTS.category_nrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_nrNull() {
                this[this.tableDQ_CHECK_RESULTS.category_nrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrow_nr_trend_check_okNull() {
                return this.IsNull(this.tableDQ_CHECK_RESULTS.row_nr_trend_check_okColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrow_nr_trend_check_okNull() {
                this[this.tableDQ_CHECK_RESULTS.row_nr_trend_check_okColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_nr_trend_check_okNull() {
                return this.IsNull(this.tableDQ_CHECK_RESULTS.category_nr_trend_check_okColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_nr_trend_check_okNull() {
                this[this.tableDQ_CHECK_RESULTS.category_nr_trend_check_okColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstdev_check_okNull() {
                return this.IsNull(this.tableDQ_CHECK_RESULTS.stdev_check_okColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstdev_check_okNull() {
                this[this.tableDQ_CHECK_RESULTS.stdev_check_okColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_defined_check_okNull() {
                return this.IsNull(this.tableDQ_CHECK_RESULTS.user_defined_check_okColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_defined_check_okNull() {
                this[this.tableDQ_CHECK_RESULTS.user_defined_check_okColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DQ_DATABASESRow : global::System.Data.DataRow {
            
            private DQ_DATABASESDataTable tableDQ_DATABASES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_DATABASESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDQ_DATABASES = ((DQ_DATABASESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int database_id {
                get {
                    return ((int)(this[this.tableDQ_DATABASES.database_idColumn]));
                }
                set {
                    this[this.tableDQ_DATABASES.database_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string database_name {
                get {
                    return ((string)(this[this.tableDQ_DATABASES.database_nameColumn]));
                }
                set {
                    this[this.tableDQ_DATABASES.database_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool database_active {
                get {
                    return ((bool)(this[this.tableDQ_DATABASES.database_activeColumn]));
                }
                set {
                    this[this.tableDQ_DATABASES.database_activeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_TABLESRow[] GetDQ_TABLESRows() {
                if ((this.Table.ChildRelations["FK_TABLES_DATABASES"] == null)) {
                    return new DQ_TABLESRow[0];
                }
                else {
                    return ((DQ_TABLESRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TABLES_DATABASES"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DQ_FIELDSRow : global::System.Data.DataRow {
            
            private DQ_FIELDSDataTable tableDQ_FIELDS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_FIELDSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDQ_FIELDS = ((DQ_FIELDSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int field_id {
                get {
                    return ((int)(this[this.tableDQ_FIELDS.field_idColumn]));
                }
                set {
                    this[this.tableDQ_FIELDS.field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int table_id {
                get {
                    return ((int)(this[this.tableDQ_FIELDS.table_idColumn]));
                }
                set {
                    this[this.tableDQ_FIELDS.table_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string field_name {
                get {
                    return ((string)(this[this.tableDQ_FIELDS.field_nameColumn]));
                }
                set {
                    this[this.tableDQ_FIELDS.field_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string scale {
                get {
                    return ((string)(this[this.tableDQ_FIELDS.scaleColumn]));
                }
                set {
                    this[this.tableDQ_FIELDS.scaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string row_nr_trend {
                get {
                    try {
                        return ((string)(this[this.tableDQ_FIELDS.row_nr_trendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'row_nr_trend\' in table \'DQ_FIELDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_FIELDS.row_nr_trendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string category_nr_trend {
                get {
                    try {
                        return ((string)(this[this.tableDQ_FIELDS.category_nr_trendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_nr_trend\' in table \'DQ_FIELDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_FIELDS.category_nr_trendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stdev_corr_percent {
                get {
                    try {
                        return ((int)(this[this.tableDQ_FIELDS.stdev_corr_percentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stdev_corr_percent\' in table \'DQ_FIELDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_FIELDS.stdev_corr_percentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_defined_check_proc {
                get {
                    try {
                        return ((string)(this[this.tableDQ_FIELDS.user_defined_check_procColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_defined_check_proc\' in table \'DQ_FIELDS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDQ_FIELDS.user_defined_check_procColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int considered_history {
                get {
                    return ((int)(this[this.tableDQ_FIELDS.considered_historyColumn]));
                }
                set {
                    this[this.tableDQ_FIELDS.considered_historyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool field_active {
                get {
                    return ((bool)(this[this.tableDQ_FIELDS.field_activeColumn]));
                }
                set {
                    this[this.tableDQ_FIELDS.field_activeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_TABLESRow DQ_TABLESRow {
                get {
                    return ((DQ_TABLESRow)(this.GetParentRow(this.Table.ParentRelations["FK_FIELDS_TABLES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FIELDS_TABLES"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrow_nr_trendNull() {
                return this.IsNull(this.tableDQ_FIELDS.row_nr_trendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrow_nr_trendNull() {
                this[this.tableDQ_FIELDS.row_nr_trendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_nr_trendNull() {
                return this.IsNull(this.tableDQ_FIELDS.category_nr_trendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_nr_trendNull() {
                this[this.tableDQ_FIELDS.category_nr_trendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstdev_corr_percentNull() {
                return this.IsNull(this.tableDQ_FIELDS.stdev_corr_percentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstdev_corr_percentNull() {
                this[this.tableDQ_FIELDS.stdev_corr_percentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_defined_check_procNull() {
                return this.IsNull(this.tableDQ_FIELDS.user_defined_check_procColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_defined_check_procNull() {
                this[this.tableDQ_FIELDS.user_defined_check_procColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_ERROR_DETAILSRow[] GetDQ_BATCH_ERROR_DETAILSRows() {
                if ((this.Table.ChildRelations["FK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS"] == null)) {
                    return new DQ_BATCH_ERROR_DETAILSRow[0];
                }
                else {
                    return ((DQ_BATCH_ERROR_DETAILSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_DQ_BATCH_ERROR_DETAILS_DQ_FIELDS"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHES_FIELDSRow[] GetDQ_BATCHES_FIELDSRows() {
                if ((this.Table.ChildRelations["FK_BATCHES_FIELDS_FIELDS"] == null)) {
                    return new DQ_BATCHES_FIELDSRow[0];
                }
                else {
                    return ((DQ_BATCHES_FIELDSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_BATCHES_FIELDS_FIELDS"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_CHECK_RESULTSRow[] GetDQ_CHECK_RESULTSRows() {
                if ((this.Table.ChildRelations["FK_STATISTICS_FIELDS"] == null)) {
                    return new DQ_CHECK_RESULTSRow[0];
                }
                else {
                    return ((DQ_CHECK_RESULTSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_STATISTICS_FIELDS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DQ_TABLESRow : global::System.Data.DataRow {
            
            private DQ_TABLESDataTable tableDQ_TABLES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DQ_TABLESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDQ_TABLES = ((DQ_TABLESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int table_id {
                get {
                    return ((int)(this[this.tableDQ_TABLES.table_idColumn]));
                }
                set {
                    this[this.tableDQ_TABLES.table_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int database_id {
                get {
                    return ((int)(this[this.tableDQ_TABLES.database_idColumn]));
                }
                set {
                    this[this.tableDQ_TABLES.database_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string table_name {
                get {
                    return ((string)(this[this.tableDQ_TABLES.table_nameColumn]));
                }
                set {
                    this[this.tableDQ_TABLES.table_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool table_active {
                get {
                    return ((bool)(this[this.tableDQ_TABLES.table_activeColumn]));
                }
                set {
                    this[this.tableDQ_TABLES.table_activeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_DATABASESRow DQ_DATABASESRow {
                get {
                    return ((DQ_DATABASESRow)(this.GetParentRow(this.Table.ParentRelations["FK_TABLES_DATABASES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TABLES_DATABASES"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSRow[] GetDQ_FIELDSRows() {
                if ((this.Table.ChildRelations["FK_FIELDS_TABLES"] == null)) {
                    return new DQ_FIELDSRow[0];
                }
                else {
                    return ((DQ_FIELDSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_FIELDS_TABLES"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class mylogRow : global::System.Data.DataRow {
            
            private mylogDataTable tablemylog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mylogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemylog = ((mylogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int log_id {
                get {
                    return ((int)(this[this.tablemylog.log_idColumn]));
                }
                set {
                    this[this.tablemylog.log_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string log_text {
                get {
                    try {
                        return ((string)(this[this.tablemylog.log_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'log_text\' in table \'mylog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemylog.log_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islog_textNull() {
                return this.IsNull(this.tablemylog.log_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlog_textNull() {
                this[this.tablemylog.log_textColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class V_DQ_BATCH_LEVEL_RESULTSRow : global::System.Data.DataRow {
            
            private V_DQ_BATCH_LEVEL_RESULTSDataTable tableV_DQ_BATCH_LEVEL_RESULTS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_DQ_BATCH_LEVEL_RESULTSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableV_DQ_BATCH_LEVEL_RESULTS = ((V_DQ_BATCH_LEVEL_RESULTSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_log_id {
                get {
                    return ((int)(this[this.tableV_DQ_BATCH_LEVEL_RESULTS.batch_log_idColumn]));
                }
                set {
                    this[this.tableV_DQ_BATCH_LEVEL_RESULTS.batch_log_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime start_time {
                get {
                    return ((global::System.DateTime)(this[this.tableV_DQ_BATCH_LEVEL_RESULTS.start_timeColumn]));
                }
                set {
                    this[this.tableV_DQ_BATCH_LEVEL_RESULTS.start_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime end_time {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableV_DQ_BATCH_LEVEL_RESULTS.end_timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'end_time\' in table \'V_DQ_BATCH_LEVEL_RESULTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableV_DQ_BATCH_LEVEL_RESULTS.end_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool batch_check_ok {
                get {
                    try {
                        return ((bool)(this[this.tableV_DQ_BATCH_LEVEL_RESULTS.batch_check_okColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'batch_check_ok\' in table \'V_DQ_BATCH_LEVEL_RESULTS\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableV_DQ_BATCH_LEVEL_RESULTS.batch_check_okColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_id {
                get {
                    return ((int)(this[this.tableV_DQ_BATCH_LEVEL_RESULTS.batch_idColumn]));
                }
                set {
                    this[this.tableV_DQ_BATCH_LEVEL_RESULTS.batch_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string batch_name {
                get {
                    return ((string)(this[this.tableV_DQ_BATCH_LEVEL_RESULTS.batch_nameColumn]));
                }
                set {
                    this[this.tableV_DQ_BATCH_LEVEL_RESULTS.batch_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isend_timeNull() {
                return this.IsNull(this.tableV_DQ_BATCH_LEVEL_RESULTS.end_timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setend_timeNull() {
                this[this.tableV_DQ_BATCH_LEVEL_RESULTS.end_timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbatch_check_okNull() {
                return this.IsNull(this.tableV_DQ_BATCH_LEVEL_RESULTS.batch_check_okColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbatch_check_okNull() {
                this[this.tableV_DQ_BATCH_LEVEL_RESULTS.batch_check_okColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class V_DQ_FIELD_LEVEL_RESULTSRow : global::System.Data.DataRow {
            
            private V_DQ_FIELD_LEVEL_RESULTSDataTable tableV_DQ_FIELD_LEVEL_RESULTS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_DQ_FIELD_LEVEL_RESULTSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableV_DQ_FIELD_LEVEL_RESULTS = ((V_DQ_FIELD_LEVEL_RESULTSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dq_check_result_id {
                get {
                    return ((int)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.dq_check_result_idColumn]));
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.dq_check_result_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_id {
                get {
                    return ((int)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.batch_idColumn]));
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.batch_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int field_id {
                get {
                    return ((int)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.field_idColumn]));
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dq_check_date {
                get {
                    return ((global::System.DateTime)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.dq_check_dateColumn]));
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.dq_check_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long row_nr {
                get {
                    return ((long)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.row_nrColumn]));
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.row_nrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long category_nr {
                get {
                    try {
                        return ((long)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.category_nrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_nr\' in table \'V_DQ_FIELD_LEVEL_RESULTS\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.category_nrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool row_nr_trend_check_ok {
                get {
                    try {
                        return ((bool)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.row_nr_trend_check_okColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'row_nr_trend_check_ok\' in table \'V_DQ_FIELD_LEVEL_RESULTS\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.row_nr_trend_check_okColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool category_nr_trend_check_ok {
                get {
                    try {
                        return ((bool)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.category_nr_trend_check_okColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_nr_trend_check_ok\' in table \'V_DQ_FIELD_LEVEL_RESU" +
                                "LTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.category_nr_trend_check_okColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool stdev_check_ok {
                get {
                    try {
                        return ((bool)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.stdev_check_okColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stdev_check_ok\' in table \'V_DQ_FIELD_LEVEL_RESULTS\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.stdev_check_okColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool user_defined_check_ok {
                get {
                    try {
                        return ((bool)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.user_defined_check_okColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_defined_check_ok\' in table \'V_DQ_FIELD_LEVEL_RESULTS\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.user_defined_check_okColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string batch_name {
                get {
                    return ((string)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.batch_nameColumn]));
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.batch_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string database_name {
                get {
                    return ((string)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.database_nameColumn]));
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.database_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string table_name {
                get {
                    return ((string)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.table_nameColumn]));
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.table_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string field_name {
                get {
                    return ((string)(this[this.tableV_DQ_FIELD_LEVEL_RESULTS.field_nameColumn]));
                }
                set {
                    this[this.tableV_DQ_FIELD_LEVEL_RESULTS.field_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_nrNull() {
                return this.IsNull(this.tableV_DQ_FIELD_LEVEL_RESULTS.category_nrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_nrNull() {
                this[this.tableV_DQ_FIELD_LEVEL_RESULTS.category_nrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrow_nr_trend_check_okNull() {
                return this.IsNull(this.tableV_DQ_FIELD_LEVEL_RESULTS.row_nr_trend_check_okColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrow_nr_trend_check_okNull() {
                this[this.tableV_DQ_FIELD_LEVEL_RESULTS.row_nr_trend_check_okColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_nr_trend_check_okNull() {
                return this.IsNull(this.tableV_DQ_FIELD_LEVEL_RESULTS.category_nr_trend_check_okColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_nr_trend_check_okNull() {
                this[this.tableV_DQ_FIELD_LEVEL_RESULTS.category_nr_trend_check_okColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstdev_check_okNull() {
                return this.IsNull(this.tableV_DQ_FIELD_LEVEL_RESULTS.stdev_check_okColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstdev_check_okNull() {
                this[this.tableV_DQ_FIELD_LEVEL_RESULTS.stdev_check_okColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_defined_check_okNull() {
                return this.IsNull(this.tableV_DQ_FIELD_LEVEL_RESULTS.user_defined_check_okColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_defined_check_okNull() {
                this[this.tableV_DQ_FIELD_LEVEL_RESULTS.user_defined_check_okColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class V_DQ_MASTERRow : global::System.Data.DataRow {
            
            private V_DQ_MASTERDataTable tableV_DQ_MASTER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_DQ_MASTERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableV_DQ_MASTER = ((V_DQ_MASTERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int field_id {
                get {
                    return ((int)(this[this.tableV_DQ_MASTER.field_idColumn]));
                }
                set {
                    this[this.tableV_DQ_MASTER.field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int batch_id {
                get {
                    return ((int)(this[this.tableV_DQ_MASTER.batch_idColumn]));
                }
                set {
                    this[this.tableV_DQ_MASTER.batch_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int table_id {
                get {
                    return ((int)(this[this.tableV_DQ_MASTER.table_idColumn]));
                }
                set {
                    this[this.tableV_DQ_MASTER.table_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int database_id {
                get {
                    return ((int)(this[this.tableV_DQ_MASTER.database_idColumn]));
                }
                set {
                    this[this.tableV_DQ_MASTER.database_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string batch_name {
                get {
                    return ((string)(this[this.tableV_DQ_MASTER.batch_nameColumn]));
                }
                set {
                    this[this.tableV_DQ_MASTER.batch_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string table_name {
                get {
                    return ((string)(this[this.tableV_DQ_MASTER.table_nameColumn]));
                }
                set {
                    this[this.tableV_DQ_MASTER.table_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string database_name {
                get {
                    return ((string)(this[this.tableV_DQ_MASTER.database_nameColumn]));
                }
                set {
                    this[this.tableV_DQ_MASTER.database_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string field_name {
                get {
                    return ((string)(this[this.tableV_DQ_MASTER.field_nameColumn]));
                }
                set {
                    this[this.tableV_DQ_MASTER.field_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string scale {
                get {
                    return ((string)(this[this.tableV_DQ_MASTER.scaleColumn]));
                }
                set {
                    this[this.tableV_DQ_MASTER.scaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string row_nr_trend {
                get {
                    try {
                        return ((string)(this[this.tableV_DQ_MASTER.row_nr_trendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'row_nr_trend\' in table \'V_DQ_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableV_DQ_MASTER.row_nr_trendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string category_nr_trend {
                get {
                    try {
                        return ((string)(this[this.tableV_DQ_MASTER.category_nr_trendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_nr_trend\' in table \'V_DQ_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableV_DQ_MASTER.category_nr_trendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stdev_corr_percent {
                get {
                    try {
                        return ((int)(this[this.tableV_DQ_MASTER.stdev_corr_percentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stdev_corr_percent\' in table \'V_DQ_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableV_DQ_MASTER.stdev_corr_percentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_defined_check_proc {
                get {
                    try {
                        return ((string)(this[this.tableV_DQ_MASTER.user_defined_check_procColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_defined_check_proc\' in table \'V_DQ_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableV_DQ_MASTER.user_defined_check_procColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int considered_history {
                get {
                    return ((int)(this[this.tableV_DQ_MASTER.considered_historyColumn]));
                }
                set {
                    this[this.tableV_DQ_MASTER.considered_historyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrow_nr_trendNull() {
                return this.IsNull(this.tableV_DQ_MASTER.row_nr_trendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrow_nr_trendNull() {
                this[this.tableV_DQ_MASTER.row_nr_trendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_nr_trendNull() {
                return this.IsNull(this.tableV_DQ_MASTER.category_nr_trendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_nr_trendNull() {
                this[this.tableV_DQ_MASTER.category_nr_trendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstdev_corr_percentNull() {
                return this.IsNull(this.tableV_DQ_MASTER.stdev_corr_percentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstdev_corr_percentNull() {
                this[this.tableV_DQ_MASTER.stdev_corr_percentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_defined_check_procNull() {
                return this.IsNull(this.tableV_DQ_MASTER.user_defined_check_procColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_defined_check_procNull() {
                this[this.tableV_DQ_MASTER.user_defined_check_procColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DQ_BATCH_ERROR_DETAILSRowChangeEvent : global::System.EventArgs {
            
            private DQ_BATCH_ERROR_DETAILSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_ERROR_DETAILSRowChangeEvent(DQ_BATCH_ERROR_DETAILSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_ERROR_DETAILSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DQ_BATCH_LOGRowChangeEvent : global::System.EventArgs {
            
            private DQ_BATCH_LOGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_LOGRowChangeEvent(DQ_BATCH_LOGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCH_LOGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DQ_BATCHESRowChangeEvent : global::System.EventArgs {
            
            private DQ_BATCHESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHESRowChangeEvent(DQ_BATCHESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DQ_BATCHES_FIELDSRowChangeEvent : global::System.EventArgs {
            
            private DQ_BATCHES_FIELDSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHES_FIELDSRowChangeEvent(DQ_BATCHES_FIELDSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_BATCHES_FIELDSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DQ_CHECK_RESULTSRowChangeEvent : global::System.EventArgs {
            
            private DQ_CHECK_RESULTSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_CHECK_RESULTSRowChangeEvent(DQ_CHECK_RESULTSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_CHECK_RESULTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DQ_DATABASESRowChangeEvent : global::System.EventArgs {
            
            private DQ_DATABASESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_DATABASESRowChangeEvent(DQ_DATABASESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_DATABASESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DQ_FIELDSRowChangeEvent : global::System.EventArgs {
            
            private DQ_FIELDSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSRowChangeEvent(DQ_FIELDSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_FIELDSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DQ_TABLESRowChangeEvent : global::System.EventArgs {
            
            private DQ_TABLESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_TABLESRowChangeEvent(DQ_TABLESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DQ_TABLESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class mylogRowChangeEvent : global::System.EventArgs {
            
            private mylogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mylogRowChangeEvent(mylogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mylogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class V_DQ_BATCH_LEVEL_RESULTSRowChangeEvent : global::System.EventArgs {
            
            private V_DQ_BATCH_LEVEL_RESULTSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_BATCH_LEVEL_RESULTSRowChangeEvent(V_DQ_BATCH_LEVEL_RESULTSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_BATCH_LEVEL_RESULTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class V_DQ_FIELD_LEVEL_RESULTSRowChangeEvent : global::System.EventArgs {
            
            private V_DQ_FIELD_LEVEL_RESULTSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_FIELD_LEVEL_RESULTSRowChangeEvent(V_DQ_FIELD_LEVEL_RESULTSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_FIELD_LEVEL_RESULTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class V_DQ_MASTERRowChangeEvent : global::System.EventArgs {
            
            private V_DQ_MASTERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_MASTERRowChangeEvent(V_DQ_MASTERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_DQ_MASTERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DQ_Manager.AF_TESTDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DQ_BATCH_ERROR_DETAILSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DQ_BATCH_ERROR_DETAILSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DQ_BATCH_ERROR_DETAILS";
            tableMapping.ColumnMappings.Add("batch_log_id", "batch_log_id");
            tableMapping.ColumnMappings.Add("batch_log_detail_id", "batch_log_detail_id");
            tableMapping.ColumnMappings.Add("field_id", "field_id");
            tableMapping.ColumnMappings.Add("mssql_error_number", "mssql_error_number");
            tableMapping.ColumnMappings.Add("mssql_error_severity", "mssql_error_severity");
            tableMapping.ColumnMappings.Add("mssql_error_state", "mssql_error_state");
            tableMapping.ColumnMappings.Add("mssql_error_procedure", "mssql_error_procedure");
            tableMapping.ColumnMappings.Add("mssql_error_line", "mssql_error_line");
            tableMapping.ColumnMappings.Add("mssql_error_message", "mssql_error_message");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[DQ_BATCH_ERROR_DETAILS] WHERE (([batch_log_id] = @Original_batch_log_id) AND ([batch_log_detail_id] = @Original_batch_log_detail_id) AND ([field_id] = @Original_field_id) AND ((@IsNull_mssql_error_number = 1 AND [mssql_error_number] IS NULL) OR ([mssql_error_number] = @Original_mssql_error_number)) AND ((@IsNull_mssql_error_severity = 1 AND [mssql_error_severity] IS NULL) OR ([mssql_error_severity] = @Original_mssql_error_severity)) AND ((@IsNull_mssql_error_state = 1 AND [mssql_error_state] IS NULL) OR ([mssql_error_state] = @Original_mssql_error_state)) AND ((@IsNull_mssql_error_procedure = 1 AND [mssql_error_procedure] IS NULL) OR ([mssql_error_procedure] = @Original_mssql_error_procedure)) AND ((@IsNull_mssql_error_line = 1 AND [mssql_error_line] IS NULL) OR ([mssql_error_line] = @Original_mssql_error_line)) AND ((@IsNull_mssql_error_message = 1 AND [mssql_error_message] IS NULL) OR ([mssql_error_message] = @Original_mssql_error_message)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_log_detail_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_detail_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_number", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_severity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_severity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_severity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_severity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_state", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_state", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_state", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_state", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_procedure", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_procedure", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_procedure", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_procedure", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_line", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_line", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_line", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_line", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_message", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_message", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_message", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_message", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DQ_BATCH_ERROR_DETAILS] ([batch_log_id], [batch_log_detail_id], [field_id], [mssql_error_number], [mssql_error_severity], [mssql_error_state], [mssql_error_procedure], [mssql_error_line], [mssql_error_message]) VALUES (@batch_log_id, @batch_log_detail_id, @field_id, @mssql_error_number, @mssql_error_severity, @mssql_error_state, @mssql_error_procedure, @mssql_error_line, @mssql_error_message);
SELECT batch_log_id, batch_log_detail_id, field_id, mssql_error_number, mssql_error_severity, mssql_error_state, mssql_error_procedure, mssql_error_line, mssql_error_message FROM DQ_BATCH_ERROR_DETAILS WHERE (batch_log_detail_id = @batch_log_detail_id) AND (batch_log_id = @batch_log_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_log_detail_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_detail_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_severity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_severity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_state", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_state", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_procedure", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_procedure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_line", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_line", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_message", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_message", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DQ_BATCH_ERROR_DETAILS] SET [batch_log_id] = @batch_log_id, [batch_" +
                "log_detail_id] = @batch_log_detail_id, [field_id] = @field_id, [mssql_error_numb" +
                "er] = @mssql_error_number, [mssql_error_severity] = @mssql_error_severity, [mssq" +
                "l_error_state] = @mssql_error_state, [mssql_error_procedure] = @mssql_error_proc" +
                "edure, [mssql_error_line] = @mssql_error_line, [mssql_error_message] = @mssql_er" +
                "ror_message WHERE (([batch_log_id] = @Original_batch_log_id) AND ([batch_log_det" +
                "ail_id] = @Original_batch_log_detail_id) AND ([field_id] = @Original_field_id) A" +
                "ND ((@IsNull_mssql_error_number = 1 AND [mssql_error_number] IS NULL) OR ([mssql" +
                "_error_number] = @Original_mssql_error_number)) AND ((@IsNull_mssql_error_severi" +
                "ty = 1 AND [mssql_error_severity] IS NULL) OR ([mssql_error_severity] = @Origina" +
                "l_mssql_error_severity)) AND ((@IsNull_mssql_error_state = 1 AND [mssql_error_st" +
                "ate] IS NULL) OR ([mssql_error_state] = @Original_mssql_error_state)) AND ((@IsN" +
                "ull_mssql_error_procedure = 1 AND [mssql_error_procedure] IS NULL) OR ([mssql_er" +
                "ror_procedure] = @Original_mssql_error_procedure)) AND ((@IsNull_mssql_error_lin" +
                "e = 1 AND [mssql_error_line] IS NULL) OR ([mssql_error_line] = @Original_mssql_e" +
                "rror_line)) AND ((@IsNull_mssql_error_message = 1 AND [mssql_error_message] IS N" +
                "ULL) OR ([mssql_error_message] = @Original_mssql_error_message)));\r\nSELECT batch" +
                "_log_id, batch_log_detail_id, field_id, mssql_error_number, mssql_error_severity" +
                ", mssql_error_state, mssql_error_procedure, mssql_error_line, mssql_error_messag" +
                "e FROM DQ_BATCH_ERROR_DETAILS WHERE (batch_log_detail_id = @batch_log_detail_id)" +
                " AND (batch_log_id = @batch_log_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_log_detail_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_detail_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_severity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_severity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_state", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_state", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_procedure", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_procedure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_line", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_line", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_message", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_message", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_log_detail_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_detail_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_number", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_severity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_severity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_severity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_severity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_state", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_state", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_state", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_state", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_procedure", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_procedure", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_procedure", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_procedure", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_line", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_line", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_line", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_line", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mssql_error_message", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_message", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mssql_error_message", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mssql_error_message", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT batch_log_id, batch_log_detail_id, field_id, mssql_error_number, mssql_err" +
                "or_severity, mssql_error_state, mssql_error_procedure, mssql_error_line, mssql_e" +
                "rror_message FROM dbo.DQ_BATCH_ERROR_DETAILS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.DQ_BATCH_ERROR_DETAILSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.DQ_BATCH_ERROR_DETAILSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.DQ_BATCH_ERROR_DETAILSDataTable dataTable = new AF_TESTDataSet.DQ_BATCH_ERROR_DETAILSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet.DQ_BATCH_ERROR_DETAILSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DQ_BATCH_ERROR_DETAILS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_batch_log_id, int Original_batch_log_detail_id, int Original_field_id, global::System.Nullable<int> Original_mssql_error_number, global::System.Nullable<int> Original_mssql_error_severity, global::System.Nullable<int> Original_mssql_error_state, string Original_mssql_error_procedure, global::System.Nullable<int> Original_mssql_error_line, string Original_mssql_error_message) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_batch_log_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_batch_log_detail_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_field_id));
            if ((Original_mssql_error_number.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_mssql_error_number.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_mssql_error_severity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_mssql_error_severity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_mssql_error_state.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_mssql_error_state.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_mssql_error_procedure == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_mssql_error_procedure));
            }
            if ((Original_mssql_error_line.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_mssql_error_line.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_mssql_error_message == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_mssql_error_message));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int batch_log_id, int batch_log_detail_id, int field_id, global::System.Nullable<int> mssql_error_number, global::System.Nullable<int> mssql_error_severity, global::System.Nullable<int> mssql_error_state, string mssql_error_procedure, global::System.Nullable<int> mssql_error_line, string mssql_error_message) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(batch_log_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(batch_log_detail_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(field_id));
            if ((mssql_error_number.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(mssql_error_number.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_severity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(mssql_error_severity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_state.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(mssql_error_state.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_procedure == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(mssql_error_procedure));
            }
            if ((mssql_error_line.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(mssql_error_line.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_message == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(mssql_error_message));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int batch_log_id, 
                    int batch_log_detail_id, 
                    int field_id, 
                    global::System.Nullable<int> mssql_error_number, 
                    global::System.Nullable<int> mssql_error_severity, 
                    global::System.Nullable<int> mssql_error_state, 
                    string mssql_error_procedure, 
                    global::System.Nullable<int> mssql_error_line, 
                    string mssql_error_message, 
                    int Original_batch_log_id, 
                    int Original_batch_log_detail_id, 
                    int Original_field_id, 
                    global::System.Nullable<int> Original_mssql_error_number, 
                    global::System.Nullable<int> Original_mssql_error_severity, 
                    global::System.Nullable<int> Original_mssql_error_state, 
                    string Original_mssql_error_procedure, 
                    global::System.Nullable<int> Original_mssql_error_line, 
                    string Original_mssql_error_message) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(batch_log_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(batch_log_detail_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(field_id));
            if ((mssql_error_number.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(mssql_error_number.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_severity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(mssql_error_severity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_state.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(mssql_error_state.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_procedure == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(mssql_error_procedure));
            }
            if ((mssql_error_line.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(mssql_error_line.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_message == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(mssql_error_message));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_batch_log_id));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_batch_log_detail_id));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_field_id));
            if ((Original_mssql_error_number.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_mssql_error_number.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_mssql_error_severity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_mssql_error_severity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_mssql_error_state.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_mssql_error_state.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_mssql_error_procedure == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_mssql_error_procedure));
            }
            if ((Original_mssql_error_line.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_mssql_error_line.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_mssql_error_message == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_mssql_error_message));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int field_id, 
                    global::System.Nullable<int> mssql_error_number, 
                    global::System.Nullable<int> mssql_error_severity, 
                    global::System.Nullable<int> mssql_error_state, 
                    string mssql_error_procedure, 
                    global::System.Nullable<int> mssql_error_line, 
                    string mssql_error_message, 
                    int Original_batch_log_id, 
                    int Original_batch_log_detail_id, 
                    int Original_field_id, 
                    global::System.Nullable<int> Original_mssql_error_number, 
                    global::System.Nullable<int> Original_mssql_error_severity, 
                    global::System.Nullable<int> Original_mssql_error_state, 
                    string Original_mssql_error_procedure, 
                    global::System.Nullable<int> Original_mssql_error_line, 
                    string Original_mssql_error_message) {
            return this.Update(Original_batch_log_id, Original_batch_log_detail_id, field_id, mssql_error_number, mssql_error_severity, mssql_error_state, mssql_error_procedure, mssql_error_line, mssql_error_message, Original_batch_log_id, Original_batch_log_detail_id, Original_field_id, Original_mssql_error_number, Original_mssql_error_severity, Original_mssql_error_state, Original_mssql_error_procedure, Original_mssql_error_line, Original_mssql_error_message);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DQ_BATCH_LOGTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DQ_BATCH_LOGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DQ_BATCH_LOG";
            tableMapping.ColumnMappings.Add("batch_log_id", "batch_log_id");
            tableMapping.ColumnMappings.Add("batch_id", "batch_id");
            tableMapping.ColumnMappings.Add("start_time", "start_time");
            tableMapping.ColumnMappings.Add("end_time", "end_time");
            tableMapping.ColumnMappings.Add("batch_check_ok", "batch_check_ok");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [DQ_BATCH_LOG] WHERE (([batch_log_id] = @Original_batch_log_id) AND ([batch_id] = @Original_batch_id) AND ([start_time] = @Original_start_time) AND ((@IsNull_end_time = 1 AND [end_time] IS NULL) OR ([end_time] = @Original_end_time)) AND ((@IsNull_batch_check_ok = 1 AND [batch_check_ok] IS NULL) OR ([batch_check_ok] = @Original_batch_check_ok)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_end_time", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_batch_check_ok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_check_ok", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_check_ok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [DQ_BATCH_LOG] ([batch_id], [start_time], [end_time], [batch_check_ok]) VALUES (@batch_id, @start_time, @end_time, @batch_check_ok);
SELECT batch_log_id, batch_id, start_time, end_time, batch_check_ok FROM DQ_BATCH_LOG WHERE (batch_log_id = SCOPE_IDENTITY()) ORDER BY batch_log_id DESC";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_check_ok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [DQ_BATCH_LOG] SET [batch_id] = @batch_id, [start_time] = @start_time, [end_time] = @end_time, [batch_check_ok] = @batch_check_ok WHERE (([batch_log_id] = @Original_batch_log_id) AND ([batch_id] = @Original_batch_id) AND ([start_time] = @Original_start_time) AND ((@IsNull_end_time = 1 AND [end_time] IS NULL) OR ([end_time] = @Original_end_time)) AND ((@IsNull_batch_check_ok = 1 AND [batch_check_ok] IS NULL) OR ([batch_check_ok] = @Original_batch_check_ok)));
SELECT batch_log_id, batch_id, start_time, end_time, batch_check_ok FROM DQ_BATCH_LOG WHERE (batch_log_id = @batch_log_id) ORDER BY batch_log_id DESC";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_check_ok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_end_time", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_batch_check_ok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_check_ok", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_check_ok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_log_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "batch_log_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     batch_log_id, batch_id, start_time, end_time, batch_check_ok\r\nFROM    " +
                "     DQ_BATCH_LOG\r\nORDER BY batch_log_id DESC";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.DQ_BATCH_LOGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.DQ_BATCH_LOGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.DQ_BATCH_LOGDataTable dataTable = new AF_TESTDataSet.DQ_BATCH_LOGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet.DQ_BATCH_LOGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DQ_BATCH_LOG");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_batch_log_id, int Original_batch_id, System.DateTime Original_start_time, global::System.Nullable<global::System.DateTime> Original_end_time, global::System.Nullable<bool> Original_batch_check_ok) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_batch_log_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_batch_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_start_time));
            if ((Original_end_time.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_end_time.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_batch_check_ok.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_batch_check_ok.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int batch_id, System.DateTime start_time, global::System.Nullable<global::System.DateTime> end_time, global::System.Nullable<bool> batch_check_ok) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(batch_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(start_time));
            if ((end_time.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(end_time.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((batch_check_ok.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(batch_check_ok.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int batch_id, System.DateTime start_time, global::System.Nullable<global::System.DateTime> end_time, global::System.Nullable<bool> batch_check_ok, int Original_batch_log_id, int Original_batch_id, System.DateTime Original_start_time, global::System.Nullable<global::System.DateTime> Original_end_time, global::System.Nullable<bool> Original_batch_check_ok, int batch_log_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(batch_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(start_time));
            if ((end_time.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(end_time.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((batch_check_ok.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(batch_check_ok.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_batch_log_id));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_batch_id));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Original_start_time));
            if ((Original_end_time.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_end_time.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_batch_check_ok.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_batch_check_ok.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(batch_log_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int batch_id, System.DateTime start_time, global::System.Nullable<global::System.DateTime> end_time, global::System.Nullable<bool> batch_check_ok, int Original_batch_log_id, int Original_batch_id, System.DateTime Original_start_time, global::System.Nullable<global::System.DateTime> Original_end_time, global::System.Nullable<bool> Original_batch_check_ok) {
            return this.Update(batch_id, start_time, end_time, batch_check_ok, Original_batch_log_id, Original_batch_id, Original_start_time, Original_end_time, Original_batch_check_ok, Original_batch_log_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DQ_BATCHESTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DQ_BATCHESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DQ_BATCHES";
            tableMapping.ColumnMappings.Add("batch_id", "batch_id");
            tableMapping.ColumnMappings.Add("batch_name", "batch_name");
            tableMapping.ColumnMappings.Add("batch_active", "batch_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DQ_BATCHES] WHERE (([batch_id] = @Original_batch_id) AND ([bat" +
                "ch_name] = @Original_batch_name) AND ([batch_active] = @Original_batch_active))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DQ_BATCHES] ([batch_name], [batch_active]) VALUES (@batch_name" +
                ", @batch_active);\r\nSELECT batch_id, batch_name, batch_active FROM DQ_BATCHES WHE" +
                "RE (batch_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DQ_BATCHES] SET [batch_name] = @batch_name, [batch_active] = @batch_active WHERE (([batch_id] = @Original_batch_id) AND ([batch_name] = @Original_batch_name) AND ([batch_active] = @Original_batch_active));
SELECT batch_id, batch_name, batch_active FROM DQ_BATCHES WHERE (batch_id = @batch_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT batch_id, batch_name, batch_active FROM dbo.DQ_BATCHES";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.DQ_BATCHESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.DQ_BATCHESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.DQ_BATCHESDataTable dataTable = new AF_TESTDataSet.DQ_BATCHESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet.DQ_BATCHESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DQ_BATCHES");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_batch_id, string Original_batch_name, bool Original_batch_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_batch_id));
            if ((Original_batch_name == null)) {
                throw new global::System.ArgumentNullException("Original_batch_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_batch_name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_batch_active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string batch_name, bool batch_active) {
            if ((batch_name == null)) {
                throw new global::System.ArgumentNullException("batch_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(batch_name));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(batch_active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string batch_name, bool batch_active, int Original_batch_id, string Original_batch_name, bool Original_batch_active, int batch_id) {
            if ((batch_name == null)) {
                throw new global::System.ArgumentNullException("batch_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(batch_name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(batch_active));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_batch_id));
            if ((Original_batch_name == null)) {
                throw new global::System.ArgumentNullException("Original_batch_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_batch_name));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(Original_batch_active));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(batch_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string batch_name, bool batch_active, int Original_batch_id, string Original_batch_name, bool Original_batch_active) {
            return this.Update(batch_name, batch_active, Original_batch_id, Original_batch_name, Original_batch_active, Original_batch_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DQ_BATCHES_FIELDSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DQ_BATCHES_FIELDSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DQ_BATCHES_FIELDS";
            tableMapping.ColumnMappings.Add("batch_id", "batch_id");
            tableMapping.ColumnMappings.Add("field_id", "field_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DQ_BATCHES_FIELDS] WHERE (([batch_id] = @Original_batch_id) AN" +
                "D ([field_id] = @Original_field_id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DQ_BATCHES_FIELDS] ([batch_id], [field_id]) VALUES (@batch_id," +
                " @field_id);\r\nSELECT batch_id, field_id FROM DQ_BATCHES_FIELDS WHERE (batch_id =" +
                " @batch_id) AND (field_id = @field_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DQ_BATCHES_FIELDS] SET [batch_id] = @batch_id, [field_id] = @field_id WHERE (([batch_id] = @Original_batch_id) AND ([field_id] = @Original_field_id));
SELECT batch_id, field_id FROM DQ_BATCHES_FIELDS WHERE (batch_id = @batch_id) AND (field_id = @field_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT batch_id, field_id FROM dbo.DQ_BATCHES_FIELDS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.DQ_BATCHES_FIELDSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.DQ_BATCHES_FIELDSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.DQ_BATCHES_FIELDSDataTable dataTable = new AF_TESTDataSet.DQ_BATCHES_FIELDSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet.DQ_BATCHES_FIELDSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DQ_BATCHES_FIELDS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_batch_id, int Original_field_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_batch_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_field_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int batch_id, int field_id) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(batch_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(field_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int batch_id, int field_id, int Original_batch_id, int Original_field_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(batch_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(field_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_batch_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_field_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Original_batch_id, int Original_field_id) {
            return this.Update(Original_batch_id, Original_field_id, Original_batch_id, Original_field_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DQ_CHECK_RESULTSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DQ_CHECK_RESULTSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DQ_CHECK_RESULTS";
            tableMapping.ColumnMappings.Add("dq_check_result_id", "dq_check_result_id");
            tableMapping.ColumnMappings.Add("batch_id", "batch_id");
            tableMapping.ColumnMappings.Add("field_id", "field_id");
            tableMapping.ColumnMappings.Add("dq_check_date", "dq_check_date");
            tableMapping.ColumnMappings.Add("row_nr", "row_nr");
            tableMapping.ColumnMappings.Add("category_nr", "category_nr");
            tableMapping.ColumnMappings.Add("row_nr_trend_check_ok", "row_nr_trend_check_ok");
            tableMapping.ColumnMappings.Add("category_nr_trend_check_ok", "category_nr_trend_check_ok");
            tableMapping.ColumnMappings.Add("stdev_check_ok", "stdev_check_ok");
            tableMapping.ColumnMappings.Add("user_defined_check_ok", "user_defined_check_ok");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[DQ_CHECK_RESULTS] WHERE (([dq_check_result_id] = @Original_dq_check_result_id) AND ([batch_id] = @Original_batch_id) AND ([field_id] = @Original_field_id) AND ([dq_check_date] = @Original_dq_check_date) AND ([row_nr] = @Original_row_nr) AND ((@IsNull_category_nr = 1 AND [category_nr] IS NULL) OR ([category_nr] = @Original_category_nr)) AND ((@IsNull_row_nr_trend_check_ok = 1 AND [row_nr_trend_check_ok] IS NULL) OR ([row_nr_trend_check_ok] = @Original_row_nr_trend_check_ok)) AND ((@IsNull_category_nr_trend_check_ok = 1 AND [category_nr_trend_check_ok] IS NULL) OR ([category_nr_trend_check_ok] = @Original_category_nr_trend_check_ok)) AND ((@IsNull_stdev_check_ok = 1 AND [stdev_check_ok] IS NULL) OR ([stdev_check_ok] = @Original_stdev_check_ok)) AND ((@IsNull_user_defined_check_ok = 1 AND [user_defined_check_ok] IS NULL) OR ([user_defined_check_ok] = @Original_user_defined_check_ok)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dq_check_result_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dq_check_result_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dq_check_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dq_check_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_row_nr", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_category_nr", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_category_nr", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_row_nr_trend_check_ok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend_check_ok", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_row_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend_check_ok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_category_nr_trend_check_ok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend_check_ok", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_category_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend_check_ok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_stdev_check_ok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_check_ok", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_stdev_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_check_ok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_user_defined_check_ok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_ok", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_user_defined_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_ok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DQ_CHECK_RESULTS] ([batch_id], [field_id], [dq_check_date], [row_nr], [category_nr], [row_nr_trend_check_ok], [category_nr_trend_check_ok], [stdev_check_ok], [user_defined_check_ok]) VALUES (@batch_id, @field_id, @dq_check_date, @row_nr, @category_nr, @row_nr_trend_check_ok, @category_nr_trend_check_ok, @stdev_check_ok, @user_defined_check_ok);
SELECT dq_check_result_id, batch_id, field_id, dq_check_date, row_nr, category_nr, row_nr_trend_check_ok, category_nr_trend_check_ok, stdev_check_ok, user_defined_check_ok FROM DQ_CHECK_RESULTS WHERE (dq_check_result_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dq_check_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dq_check_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category_nr", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend_check_ok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend_check_ok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_check_ok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_defined_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_ok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DQ_CHECK_RESULTS] SET [batch_id] = @batch_id, [field_id] = @field_id, [dq_check_date] = @dq_check_date, [row_nr] = @row_nr, [category_nr] = @category_nr, [row_nr_trend_check_ok] = @row_nr_trend_check_ok, [category_nr_trend_check_ok] = @category_nr_trend_check_ok, [stdev_check_ok] = @stdev_check_ok, [user_defined_check_ok] = @user_defined_check_ok WHERE (([dq_check_result_id] = @Original_dq_check_result_id) AND ([batch_id] = @Original_batch_id) AND ([field_id] = @Original_field_id) AND ([dq_check_date] = @Original_dq_check_date) AND ([row_nr] = @Original_row_nr) AND ((@IsNull_category_nr = 1 AND [category_nr] IS NULL) OR ([category_nr] = @Original_category_nr)) AND ((@IsNull_row_nr_trend_check_ok = 1 AND [row_nr_trend_check_ok] IS NULL) OR ([row_nr_trend_check_ok] = @Original_row_nr_trend_check_ok)) AND ((@IsNull_category_nr_trend_check_ok = 1 AND [category_nr_trend_check_ok] IS NULL) OR ([category_nr_trend_check_ok] = @Original_category_nr_trend_check_ok)) AND ((@IsNull_stdev_check_ok = 1 AND [stdev_check_ok] IS NULL) OR ([stdev_check_ok] = @Original_stdev_check_ok)) AND ((@IsNull_user_defined_check_ok = 1 AND [user_defined_check_ok] IS NULL) OR ([user_defined_check_ok] = @Original_user_defined_check_ok)));
SELECT dq_check_result_id, batch_id, field_id, dq_check_date, row_nr, category_nr, row_nr_trend_check_ok, category_nr_trend_check_ok, stdev_check_ok, user_defined_check_ok FROM DQ_CHECK_RESULTS WHERE (dq_check_result_id = @dq_check_result_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dq_check_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dq_check_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category_nr", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend_check_ok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend_check_ok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_check_ok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_defined_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_ok", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dq_check_result_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dq_check_result_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_batch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "batch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dq_check_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dq_check_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_row_nr", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_category_nr", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_category_nr", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_row_nr_trend_check_ok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend_check_ok", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_row_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend_check_ok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_category_nr_trend_check_ok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend_check_ok", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_category_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend_check_ok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_stdev_check_ok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_check_ok", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_stdev_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_check_ok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_user_defined_check_ok", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_ok", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_user_defined_check_ok", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_ok", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dq_check_result_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "dq_check_result_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT dq_check_result_id, batch_id, field_id, dq_check_date, row_nr, category_nr" +
                ", row_nr_trend_check_ok, category_nr_trend_check_ok, stdev_check_ok, user_define" +
                "d_check_ok FROM dbo.DQ_CHECK_RESULTS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.DQ_CHECK_RESULTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.DQ_CHECK_RESULTSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.DQ_CHECK_RESULTSDataTable dataTable = new AF_TESTDataSet.DQ_CHECK_RESULTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet.DQ_CHECK_RESULTSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DQ_CHECK_RESULTS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_dq_check_result_id, int Original_batch_id, int Original_field_id, System.DateTime Original_dq_check_date, long Original_row_nr, global::System.Nullable<long> Original_category_nr, global::System.Nullable<bool> Original_row_nr_trend_check_ok, global::System.Nullable<bool> Original_category_nr_trend_check_ok, global::System.Nullable<bool> Original_stdev_check_ok, global::System.Nullable<bool> Original_user_defined_check_ok) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_dq_check_result_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_batch_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_field_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_dq_check_date));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_row_nr));
            if ((Original_category_nr.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_category_nr.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_row_nr_trend_check_ok.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_row_nr_trend_check_ok.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_category_nr_trend_check_ok.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_category_nr_trend_check_ok.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_stdev_check_ok.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_stdev_check_ok.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_user_defined_check_ok.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((bool)(Original_user_defined_check_ok.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int batch_id, int field_id, System.DateTime dq_check_date, long row_nr, global::System.Nullable<long> category_nr, global::System.Nullable<bool> row_nr_trend_check_ok, global::System.Nullable<bool> category_nr_trend_check_ok, global::System.Nullable<bool> stdev_check_ok, global::System.Nullable<bool> user_defined_check_ok) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(batch_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(field_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(dq_check_date));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(row_nr));
            if ((category_nr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(category_nr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((row_nr_trend_check_ok.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(row_nr_trend_check_ok.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((category_nr_trend_check_ok.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(category_nr_trend_check_ok.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((stdev_check_ok.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(stdev_check_ok.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((user_defined_check_ok.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(user_defined_check_ok.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int batch_id, 
                    int field_id, 
                    System.DateTime dq_check_date, 
                    long row_nr, 
                    global::System.Nullable<long> category_nr, 
                    global::System.Nullable<bool> row_nr_trend_check_ok, 
                    global::System.Nullable<bool> category_nr_trend_check_ok, 
                    global::System.Nullable<bool> stdev_check_ok, 
                    global::System.Nullable<bool> user_defined_check_ok, 
                    int Original_dq_check_result_id, 
                    int Original_batch_id, 
                    int Original_field_id, 
                    System.DateTime Original_dq_check_date, 
                    long Original_row_nr, 
                    global::System.Nullable<long> Original_category_nr, 
                    global::System.Nullable<bool> Original_row_nr_trend_check_ok, 
                    global::System.Nullable<bool> Original_category_nr_trend_check_ok, 
                    global::System.Nullable<bool> Original_stdev_check_ok, 
                    global::System.Nullable<bool> Original_user_defined_check_ok, 
                    int dq_check_result_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(batch_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(field_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(dq_check_date));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(row_nr));
            if ((category_nr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(category_nr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((row_nr_trend_check_ok.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(row_nr_trend_check_ok.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((category_nr_trend_check_ok.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(category_nr_trend_check_ok.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((stdev_check_ok.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(stdev_check_ok.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((user_defined_check_ok.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(user_defined_check_ok.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_dq_check_result_id));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_batch_id));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_field_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_dq_check_date));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_row_nr));
            if ((Original_category_nr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_category_nr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_row_nr_trend_check_ok.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((bool)(Original_row_nr_trend_check_ok.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_category_nr_trend_check_ok.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((bool)(Original_category_nr_trend_check_ok.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_stdev_check_ok.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((bool)(Original_stdev_check_ok.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_user_defined_check_ok.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(Original_user_defined_check_ok.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(dq_check_result_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int batch_id, 
                    int field_id, 
                    System.DateTime dq_check_date, 
                    long row_nr, 
                    global::System.Nullable<long> category_nr, 
                    global::System.Nullable<bool> row_nr_trend_check_ok, 
                    global::System.Nullable<bool> category_nr_trend_check_ok, 
                    global::System.Nullable<bool> stdev_check_ok, 
                    global::System.Nullable<bool> user_defined_check_ok, 
                    int Original_dq_check_result_id, 
                    int Original_batch_id, 
                    int Original_field_id, 
                    System.DateTime Original_dq_check_date, 
                    long Original_row_nr, 
                    global::System.Nullable<long> Original_category_nr, 
                    global::System.Nullable<bool> Original_row_nr_trend_check_ok, 
                    global::System.Nullable<bool> Original_category_nr_trend_check_ok, 
                    global::System.Nullable<bool> Original_stdev_check_ok, 
                    global::System.Nullable<bool> Original_user_defined_check_ok) {
            return this.Update(batch_id, field_id, dq_check_date, row_nr, category_nr, row_nr_trend_check_ok, category_nr_trend_check_ok, stdev_check_ok, user_defined_check_ok, Original_dq_check_result_id, Original_batch_id, Original_field_id, Original_dq_check_date, Original_row_nr, Original_category_nr, Original_row_nr_trend_check_ok, Original_category_nr_trend_check_ok, Original_stdev_check_ok, Original_user_defined_check_ok, Original_dq_check_result_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DQ_DATABASESTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DQ_DATABASESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DQ_DATABASES";
            tableMapping.ColumnMappings.Add("database_id", "database_id");
            tableMapping.ColumnMappings.Add("database_name", "database_name");
            tableMapping.ColumnMappings.Add("database_active", "database_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DQ_DATABASES] WHERE (([database_id] = @Original_database_id) A" +
                "ND ([database_name] = @Original_database_name) AND ([database_active] = @Origina" +
                "l_database_active))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_database_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_database_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_database_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DQ_DATABASES] ([database_name], [database_active]) VALUES (@da" +
                "tabase_name, @database_active);\r\nSELECT database_id, database_name, database_act" +
                "ive FROM DQ_DATABASES WHERE (database_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@database_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@database_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DQ_DATABASES] SET [database_name] = @database_name, [database_active] = @database_active WHERE (([database_id] = @Original_database_id) AND ([database_name] = @Original_database_name) AND ([database_active] = @Original_database_active));
SELECT database_id, database_name, database_active FROM DQ_DATABASES WHERE (database_id = @database_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@database_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@database_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_database_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_database_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_database_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@database_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "database_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT database_id, database_name, database_active FROM dbo.DQ_DATABASES";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.DQ_DATABASESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.DQ_DATABASESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.DQ_DATABASESDataTable dataTable = new AF_TESTDataSet.DQ_DATABASESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet.DQ_DATABASESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DQ_DATABASES");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_database_id, string Original_database_name, bool Original_database_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_database_id));
            if ((Original_database_name == null)) {
                throw new global::System.ArgumentNullException("Original_database_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_database_name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_database_active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string database_name, bool database_active) {
            if ((database_name == null)) {
                throw new global::System.ArgumentNullException("database_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(database_name));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(database_active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string database_name, bool database_active, int Original_database_id, string Original_database_name, bool Original_database_active, int database_id) {
            if ((database_name == null)) {
                throw new global::System.ArgumentNullException("database_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(database_name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(database_active));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_database_id));
            if ((Original_database_name == null)) {
                throw new global::System.ArgumentNullException("Original_database_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_database_name));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(Original_database_active));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(database_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string database_name, bool database_active, int Original_database_id, string Original_database_name, bool Original_database_active) {
            return this.Update(database_name, database_active, Original_database_id, Original_database_name, Original_database_active, Original_database_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DQ_FIELDSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DQ_FIELDSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DQ_FIELDS";
            tableMapping.ColumnMappings.Add("field_id", "field_id");
            tableMapping.ColumnMappings.Add("table_id", "table_id");
            tableMapping.ColumnMappings.Add("field_name", "field_name");
            tableMapping.ColumnMappings.Add("scale", "scale");
            tableMapping.ColumnMappings.Add("row_nr_trend", "row_nr_trend");
            tableMapping.ColumnMappings.Add("category_nr_trend", "category_nr_trend");
            tableMapping.ColumnMappings.Add("stdev_corr_percent", "stdev_corr_percent");
            tableMapping.ColumnMappings.Add("user_defined_check_proc", "user_defined_check_proc");
            tableMapping.ColumnMappings.Add("considered_history", "considered_history");
            tableMapping.ColumnMappings.Add("field_active", "field_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[DQ_FIELDS] WHERE (([field_id] = @Original_field_id) AND ([table_id] = @Original_table_id) AND ([field_name] = @Original_field_name) AND ([scale] = @Original_scale) AND ((@IsNull_row_nr_trend = 1 AND [row_nr_trend] IS NULL) OR ([row_nr_trend] = @Original_row_nr_trend)) AND ((@IsNull_category_nr_trend = 1 AND [category_nr_trend] IS NULL) OR ([category_nr_trend] = @Original_category_nr_trend)) AND ((@IsNull_stdev_corr_percent = 1 AND [stdev_corr_percent] IS NULL) OR ([stdev_corr_percent] = @Original_stdev_corr_percent)) AND ((@IsNull_user_defined_check_proc = 1 AND [user_defined_check_proc] IS NULL) OR ([user_defined_check_proc] = @Original_user_defined_check_proc)) AND ([considered_history] = @Original_considered_history) AND ([field_active] = @Original_field_active))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_table_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_scale", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "scale", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_row_nr_trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_row_nr_trend", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_category_nr_trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_category_nr_trend", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_stdev_corr_percent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_corr_percent", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_stdev_corr_percent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_corr_percent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_user_defined_check_proc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_proc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_user_defined_check_proc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_proc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_considered_history", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "considered_history", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DQ_FIELDS] ([field_id], [table_id], [field_name], [scale], [row_nr_trend], [category_nr_trend], [stdev_corr_percent], [user_defined_check_proc], [considered_history], [field_active]) VALUES (@field_id, @table_id, @field_name, @scale, @row_nr_trend, @category_nr_trend, @stdev_corr_percent, @user_defined_check_proc, @considered_history, @field_active);
SELECT field_id, table_id, field_name, scale, row_nr_trend, category_nr_trend, stdev_corr_percent, user_defined_check_proc, considered_history, field_active FROM DQ_FIELDS WHERE (field_id = @field_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scale", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "scale", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr_trend", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category_nr_trend", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_corr_percent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_corr_percent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_defined_check_proc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_proc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@considered_history", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "considered_history", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DQ_FIELDS] SET [field_id] = @field_id, [table_id] = @table_id, [field_name] = @field_name, [scale] = @scale, [row_nr_trend] = @row_nr_trend, [category_nr_trend] = @category_nr_trend, [stdev_corr_percent] = @stdev_corr_percent, [user_defined_check_proc] = @user_defined_check_proc, [considered_history] = @considered_history, [field_active] = @field_active WHERE (([field_id] = @Original_field_id) AND ([table_id] = @Original_table_id) AND ([field_name] = @Original_field_name) AND ([scale] = @Original_scale) AND ((@IsNull_row_nr_trend = 1 AND [row_nr_trend] IS NULL) OR ([row_nr_trend] = @Original_row_nr_trend)) AND ((@IsNull_category_nr_trend = 1 AND [category_nr_trend] IS NULL) OR ([category_nr_trend] = @Original_category_nr_trend)) AND ((@IsNull_stdev_corr_percent = 1 AND [stdev_corr_percent] IS NULL) OR ([stdev_corr_percent] = @Original_stdev_corr_percent)) AND ((@IsNull_user_defined_check_proc = 1 AND [user_defined_check_proc] IS NULL) OR ([user_defined_check_proc] = @Original_user_defined_check_proc)) AND ([considered_history] = @Original_considered_history) AND ([field_active] = @Original_field_active));
SELECT field_id, table_id, field_name, scale, row_nr_trend, category_nr_trend, stdev_corr_percent, user_defined_check_proc, considered_history, field_active FROM DQ_FIELDS WHERE (field_id = @field_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scale", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "scale", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr_trend", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category_nr_trend", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_corr_percent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_corr_percent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_defined_check_proc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_proc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@considered_history", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "considered_history", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_table_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_scale", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "scale", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_row_nr_trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_row_nr_trend", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_nr_trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_category_nr_trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_category_nr_trend", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "category_nr_trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_stdev_corr_percent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_corr_percent", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_stdev_corr_percent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "stdev_corr_percent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_user_defined_check_proc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_proc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_user_defined_check_proc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_defined_check_proc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_considered_history", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "considered_history", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_field_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "field_active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT field_id, table_id, field_name, scale, row_nr_trend, category_nr_trend, st" +
                "dev_corr_percent, user_defined_check_proc, considered_history, field_active FROM" +
                " dbo.DQ_FIELDS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.DQ_FIELDSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.DQ_FIELDSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.DQ_FIELDSDataTable dataTable = new AF_TESTDataSet.DQ_FIELDSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet.DQ_FIELDSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DQ_FIELDS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_field_id, int Original_table_id, string Original_field_name, string Original_scale, string Original_row_nr_trend, string Original_category_nr_trend, global::System.Nullable<int> Original_stdev_corr_percent, string Original_user_defined_check_proc, int Original_considered_history, bool Original_field_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_field_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_table_id));
            if ((Original_field_name == null)) {
                throw new global::System.ArgumentNullException("Original_field_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_field_name));
            }
            if ((Original_scale == null)) {
                throw new global::System.ArgumentNullException("Original_scale");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_scale));
            }
            if ((Original_row_nr_trend == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_row_nr_trend));
            }
            if ((Original_category_nr_trend == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_category_nr_trend));
            }
            if ((Original_stdev_corr_percent.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_stdev_corr_percent.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_user_defined_check_proc == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_user_defined_check_proc));
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_considered_history));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((bool)(Original_field_active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int field_id, int table_id, string field_name, string scale, string row_nr_trend, string category_nr_trend, global::System.Nullable<int> stdev_corr_percent, string user_defined_check_proc, int considered_history, bool field_active) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(field_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(table_id));
            if ((field_name == null)) {
                throw new global::System.ArgumentNullException("field_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(field_name));
            }
            if ((scale == null)) {
                throw new global::System.ArgumentNullException("scale");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(scale));
            }
            if ((row_nr_trend == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(row_nr_trend));
            }
            if ((category_nr_trend == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(category_nr_trend));
            }
            if ((stdev_corr_percent.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(stdev_corr_percent.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((user_defined_check_proc == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(user_defined_check_proc));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(considered_history));
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(field_active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int field_id, 
                    int table_id, 
                    string field_name, 
                    string scale, 
                    string row_nr_trend, 
                    string category_nr_trend, 
                    global::System.Nullable<int> stdev_corr_percent, 
                    string user_defined_check_proc, 
                    int considered_history, 
                    bool field_active, 
                    int Original_field_id, 
                    int Original_table_id, 
                    string Original_field_name, 
                    string Original_scale, 
                    string Original_row_nr_trend, 
                    string Original_category_nr_trend, 
                    global::System.Nullable<int> Original_stdev_corr_percent, 
                    string Original_user_defined_check_proc, 
                    int Original_considered_history, 
                    bool Original_field_active) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(field_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(table_id));
            if ((field_name == null)) {
                throw new global::System.ArgumentNullException("field_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(field_name));
            }
            if ((scale == null)) {
                throw new global::System.ArgumentNullException("scale");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(scale));
            }
            if ((row_nr_trend == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(row_nr_trend));
            }
            if ((category_nr_trend == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(category_nr_trend));
            }
            if ((stdev_corr_percent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(stdev_corr_percent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((user_defined_check_proc == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(user_defined_check_proc));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(considered_history));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(field_active));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_field_id));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_table_id));
            if ((Original_field_name == null)) {
                throw new global::System.ArgumentNullException("Original_field_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_field_name));
            }
            if ((Original_scale == null)) {
                throw new global::System.ArgumentNullException("Original_scale");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_scale));
            }
            if ((Original_row_nr_trend == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_row_nr_trend));
            }
            if ((Original_category_nr_trend == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_category_nr_trend));
            }
            if ((Original_stdev_corr_percent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_stdev_corr_percent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_user_defined_check_proc == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_user_defined_check_proc));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_considered_history));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(Original_field_active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int table_id, 
                    string field_name, 
                    string scale, 
                    string row_nr_trend, 
                    string category_nr_trend, 
                    global::System.Nullable<int> stdev_corr_percent, 
                    string user_defined_check_proc, 
                    int considered_history, 
                    bool field_active, 
                    int Original_field_id, 
                    int Original_table_id, 
                    string Original_field_name, 
                    string Original_scale, 
                    string Original_row_nr_trend, 
                    string Original_category_nr_trend, 
                    global::System.Nullable<int> Original_stdev_corr_percent, 
                    string Original_user_defined_check_proc, 
                    int Original_considered_history, 
                    bool Original_field_active) {
            return this.Update(Original_field_id, table_id, field_name, scale, row_nr_trend, category_nr_trend, stdev_corr_percent, user_defined_check_proc, considered_history, field_active, Original_field_id, Original_table_id, Original_field_name, Original_scale, Original_row_nr_trend, Original_category_nr_trend, Original_stdev_corr_percent, Original_user_defined_check_proc, Original_considered_history, Original_field_active);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DQ_TABLESTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DQ_TABLESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DQ_TABLES";
            tableMapping.ColumnMappings.Add("table_id", "table_id");
            tableMapping.ColumnMappings.Add("database_id", "database_id");
            tableMapping.ColumnMappings.Add("table_name", "table_name");
            tableMapping.ColumnMappings.Add("table_active", "table_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DQ_TABLES] WHERE (([table_id] = @Original_table_id) AND ([data" +
                "base_id] = @Original_database_id) AND ([table_name] = @Original_table_name) AND " +
                "([table_active] = @Original_table_active))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_table_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_database_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_table_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_table_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DQ_TABLES] ([database_id], [table_name], [table_active]) VALUE" +
                "S (@database_id, @table_name, @table_active);\r\nSELECT table_id, database_id, tab" +
                "le_name, table_active FROM DQ_TABLES WHERE (table_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@database_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DQ_TABLES] SET [database_id] = @database_id, [table_name] = @table_name, [table_active] = @table_active WHERE (([table_id] = @Original_table_id) AND ([database_id] = @Original_database_id) AND ([table_name] = @Original_table_name) AND ([table_active] = @Original_table_active));
SELECT table_id, database_id, table_name, table_active FROM DQ_TABLES WHERE (table_id = @table_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@database_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_active", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_table_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_database_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "database_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_table_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_table_active", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_active", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "table_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT table_id, database_id, table_name, table_active FROM dbo.DQ_TABLES";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.DQ_TABLESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.DQ_TABLESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.DQ_TABLESDataTable dataTable = new AF_TESTDataSet.DQ_TABLESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet.DQ_TABLESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DQ_TABLES");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_table_id, int Original_database_id, string Original_table_name, bool Original_table_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_table_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_database_id));
            if ((Original_table_name == null)) {
                throw new global::System.ArgumentNullException("Original_table_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_table_name));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_table_active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int database_id, string table_name, bool table_active) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(database_id));
            if ((table_name == null)) {
                throw new global::System.ArgumentNullException("table_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(table_name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(table_active));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int database_id, string table_name, bool table_active, int Original_table_id, int Original_database_id, string Original_table_name, bool Original_table_active, int table_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(database_id));
            if ((table_name == null)) {
                throw new global::System.ArgumentNullException("table_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(table_name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(table_active));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_table_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_database_id));
            if ((Original_table_name == null)) {
                throw new global::System.ArgumentNullException("Original_table_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_table_name));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Original_table_active));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(table_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int database_id, string table_name, bool table_active, int Original_table_id, int Original_database_id, string Original_table_name, bool Original_table_active) {
            return this.Update(database_id, table_name, table_active, Original_table_id, Original_database_id, Original_table_name, Original_table_active, Original_table_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class mylogTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public mylogTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "mylog";
            tableMapping.ColumnMappings.Add("log_id", "log_id");
            tableMapping.ColumnMappings.Add("log_text", "log_text");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[mylog] ([log_text]) VALUES (@log_text)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@log_text", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "log_text", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT log_id, log_text FROM dbo.mylog";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.mylogDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.mylogDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.mylogDataTable dataTable = new AF_TESTDataSet.mylogDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet.mylogDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AF_TESTDataSet dataSet) {
            return this.Adapter.Update(dataSet, "mylog");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string log_text) {
            if ((log_text == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(log_text));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class V_DQ_BATCH_LEVEL_RESULTSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public V_DQ_BATCH_LEVEL_RESULTSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "V_DQ_BATCH_LEVEL_RESULTS";
            tableMapping.ColumnMappings.Add("batch_log_id", "batch_log_id");
            tableMapping.ColumnMappings.Add("start_time", "start_time");
            tableMapping.ColumnMappings.Add("end_time", "end_time");
            tableMapping.ColumnMappings.Add("batch_check_ok", "batch_check_ok");
            tableMapping.ColumnMappings.Add("batch_id", "batch_id");
            tableMapping.ColumnMappings.Add("batch_name", "batch_name");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     batch_log_id, start_time, end_time, batch_check_ok, batch_id, batch_na" +
                "me\r\nFROM         V_DQ_BATCH_LEVEL_RESULTS\r\nORDER BY batch_log_id DESC";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT batch_check_ok, batch_id, batch_log_id, batch_name, end_time, start_time F" +
                "ROM V_DQ_BATCH_LEVEL_RESULTS ORDER BY batch_log_id DESC";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.V_DQ_BATCH_LEVEL_RESULTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.V_DQ_BATCH_LEVEL_RESULTSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.V_DQ_BATCH_LEVEL_RESULTSDataTable dataTable = new AF_TESTDataSet.V_DQ_BATCH_LEVEL_RESULTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(AF_TESTDataSet.V_DQ_BATCH_LEVEL_RESULTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class V_DQ_FIELD_LEVEL_RESULTSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public V_DQ_FIELD_LEVEL_RESULTSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "V_DQ_FIELD_LEVEL_RESULTS";
            tableMapping.ColumnMappings.Add("dq_check_result_id", "dq_check_result_id");
            tableMapping.ColumnMappings.Add("batch_id", "batch_id");
            tableMapping.ColumnMappings.Add("field_id", "field_id");
            tableMapping.ColumnMappings.Add("dq_check_date", "dq_check_date");
            tableMapping.ColumnMappings.Add("row_nr", "row_nr");
            tableMapping.ColumnMappings.Add("category_nr", "category_nr");
            tableMapping.ColumnMappings.Add("row_nr_trend_check_ok", "row_nr_trend_check_ok");
            tableMapping.ColumnMappings.Add("category_nr_trend_check_ok", "category_nr_trend_check_ok");
            tableMapping.ColumnMappings.Add("stdev_check_ok", "stdev_check_ok");
            tableMapping.ColumnMappings.Add("user_defined_check_ok", "user_defined_check_ok");
            tableMapping.ColumnMappings.Add("batch_name", "batch_name");
            tableMapping.ColumnMappings.Add("database_name", "database_name");
            tableMapping.ColumnMappings.Add("table_name", "table_name");
            tableMapping.ColumnMappings.Add("field_name", "field_name");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT dq_check_result_id, batch_id, field_id, dq_check_date, row_nr, category_nr, row_nr_trend_check_ok, category_nr_trend_check_ok, stdev_check_ok, user_defined_check_ok, batch_name, database_name, table_name, field_name FROM dbo.V_DQ_FIELD_LEVEL_RESULTS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.V_DQ_FIELD_LEVEL_RESULTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.V_DQ_FIELD_LEVEL_RESULTSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.V_DQ_FIELD_LEVEL_RESULTSDataTable dataTable = new AF_TESTDataSet.V_DQ_FIELD_LEVEL_RESULTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class V_DQ_MASTERTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public V_DQ_MASTERTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "V_DQ_MASTER";
            tableMapping.ColumnMappings.Add("field_id", "field_id");
            tableMapping.ColumnMappings.Add("batch_id", "batch_id");
            tableMapping.ColumnMappings.Add("table_id", "table_id");
            tableMapping.ColumnMappings.Add("database_id", "database_id");
            tableMapping.ColumnMappings.Add("batch_name", "batch_name");
            tableMapping.ColumnMappings.Add("table_name", "table_name");
            tableMapping.ColumnMappings.Add("database_name", "database_name");
            tableMapping.ColumnMappings.Add("field_name", "field_name");
            tableMapping.ColumnMappings.Add("scale", "scale");
            tableMapping.ColumnMappings.Add("row_nr_trend", "row_nr_trend");
            tableMapping.ColumnMappings.Add("category_nr_trend", "category_nr_trend");
            tableMapping.ColumnMappings.Add("stdev_corr_percent", "stdev_corr_percent");
            tableMapping.ColumnMappings.Add("user_defined_check_proc", "user_defined_check_proc");
            tableMapping.ColumnMappings.Add("considered_history", "considered_history");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT field_id, batch_id, table_id, database_id, batch_name, table_name, databas" +
                "e_name, field_name, scale, row_nr_trend, category_nr_trend, stdev_corr_percent, " +
                "user_defined_check_proc, considered_history FROM dbo.V_DQ_MASTER";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AF_TESTDataSet.V_DQ_MASTERDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AF_TESTDataSet.V_DQ_MASTERDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AF_TESTDataSet.V_DQ_MASTERDataTable dataTable = new AF_TESTDataSet.V_DQ_MASTERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.IDbCommand[] _commandCollection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.IDbCommand[7];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandText = "dbo.proc_dq_check";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_name", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandText = "dbo.proc_dq_field_check";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_name", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@database_name", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_name", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scale", global::System.Data.SqlDbType.VarChar, 1, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr_trend", global::System.Data.SqlDbType.VarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_nr_trend", global::System.Data.SqlDbType.VarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_corr_percent", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_defined_check_proc", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@considered_history", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.InputOutput, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_nr", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.InputOutput, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.InputOutput, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.InputOutput, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_check_ok", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.InputOutput, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_defined_check_ok", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.InputOutput, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandText = "dbo.proc_dq_user_defined_check_template";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_name", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@database_name", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_name", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scale", global::System.Data.SqlDbType.VarChar, 1, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr_trend", global::System.Data.SqlDbType.VarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_nr_trend", global::System.Data.SqlDbType.VarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_corr_percent", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@considered_history", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_nr", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@avg_row_nr", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_row_nr", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_nr_trend_check_ok", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_check_ok", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_defined_check_ok_out", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.InputOutput, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).CommandText = "dbo.proc_dq_write_error_details";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@batch_log_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_number", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_severity", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_state", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_procedure", global::System.Data.SqlDbType.NVarChar, 126, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_line", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mssql_error_message", global::System.Data.SqlDbType.NVarChar, 2048, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).CommandText = "dbo.func_is_cat_nr_trend_check_ok";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.ReturnValue, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_nr_trend", global::System.Data.SqlDbType.VarChar, 2, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@last_cat_nr", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cat_nr", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).CommandText = "dbo.func_is_row_nr_trend_check_ok";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.ReturnValue, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr_trend", global::System.Data.SqlDbType.VarChar, 2, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@last_row_nr", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DQ_Manager.Properties.Settings.Default.AF_TESTConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).CommandText = "dbo.func_is_stdev_check_ok";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.ReturnValue, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_nr", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@avg_row_nr", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_row_nr", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stdev_corr_percent", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int proc_dq_check(string batch_name) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            if ((batch_name == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(batch_name));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int proc_dq_field_check(
                    global::System.Nullable<int> field_id, 
                    string table_name, 
                    string database_name, 
                    string field_name, 
                    string scale, 
                    string row_nr_trend, 
                    string cat_nr_trend, 
                    global::System.Nullable<int> stdev_corr_percent, 
                    string user_defined_check_proc, 
                    global::System.Nullable<int> considered_history, 
                    ref global::System.Nullable<long> row_nr, 
                    ref global::System.Nullable<long> cat_nr, 
                    ref global::System.Nullable<bool> row_nr_trend_check_ok, 
                    ref global::System.Nullable<bool> cat_nr_trend_check_ok, 
                    ref global::System.Nullable<bool> stdev_check_ok, 
                    ref global::System.Nullable<bool> user_defined_check_ok) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[1]));
            if ((field_id.HasValue == true)) {
                command.Parameters[1].Value = ((int)(field_id.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((table_name == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(table_name));
            }
            if ((database_name == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(database_name));
            }
            if ((field_name == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(field_name));
            }
            if ((scale == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(scale));
            }
            if ((row_nr_trend == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(row_nr_trend));
            }
            if ((cat_nr_trend == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(cat_nr_trend));
            }
            if ((stdev_corr_percent.HasValue == true)) {
                command.Parameters[8].Value = ((int)(stdev_corr_percent.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((user_defined_check_proc == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(user_defined_check_proc));
            }
            if ((considered_history.HasValue == true)) {
                command.Parameters[10].Value = ((int)(considered_history.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((row_nr.HasValue == true)) {
                command.Parameters[11].Value = ((long)(row_nr.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((cat_nr.HasValue == true)) {
                command.Parameters[12].Value = ((long)(cat_nr.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((row_nr_trend_check_ok.HasValue == true)) {
                command.Parameters[13].Value = ((bool)(row_nr_trend_check_ok.Value));
            }
            else {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((cat_nr_trend_check_ok.HasValue == true)) {
                command.Parameters[14].Value = ((bool)(cat_nr_trend_check_ok.Value));
            }
            else {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((stdev_check_ok.HasValue == true)) {
                command.Parameters[15].Value = ((bool)(stdev_check_ok.Value));
            }
            else {
                command.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((user_defined_check_ok.HasValue == true)) {
                command.Parameters[16].Value = ((bool)(user_defined_check_ok.Value));
            }
            else {
                command.Parameters[16].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[11].Value == null) 
                        || (command.Parameters[11].Value.GetType() == typeof(global::System.DBNull)))) {
                row_nr = new global::System.Nullable<long>();
            }
            else {
                row_nr = new global::System.Nullable<long>(((long)(command.Parameters[11].Value)));
            }
            if (((command.Parameters[12].Value == null) 
                        || (command.Parameters[12].Value.GetType() == typeof(global::System.DBNull)))) {
                cat_nr = new global::System.Nullable<long>();
            }
            else {
                cat_nr = new global::System.Nullable<long>(((long)(command.Parameters[12].Value)));
            }
            if (((command.Parameters[13].Value == null) 
                        || (command.Parameters[13].Value.GetType() == typeof(global::System.DBNull)))) {
                row_nr_trend_check_ok = new global::System.Nullable<bool>();
            }
            else {
                row_nr_trend_check_ok = new global::System.Nullable<bool>(((bool)(command.Parameters[13].Value)));
            }
            if (((command.Parameters[14].Value == null) 
                        || (command.Parameters[14].Value.GetType() == typeof(global::System.DBNull)))) {
                cat_nr_trend_check_ok = new global::System.Nullable<bool>();
            }
            else {
                cat_nr_trend_check_ok = new global::System.Nullable<bool>(((bool)(command.Parameters[14].Value)));
            }
            if (((command.Parameters[15].Value == null) 
                        || (command.Parameters[15].Value.GetType() == typeof(global::System.DBNull)))) {
                stdev_check_ok = new global::System.Nullable<bool>();
            }
            else {
                stdev_check_ok = new global::System.Nullable<bool>(((bool)(command.Parameters[15].Value)));
            }
            if (((command.Parameters[16].Value == null) 
                        || (command.Parameters[16].Value.GetType() == typeof(global::System.DBNull)))) {
                user_defined_check_ok = new global::System.Nullable<bool>();
            }
            else {
                user_defined_check_ok = new global::System.Nullable<bool>(((bool)(command.Parameters[16].Value)));
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int proc_dq_user_defined_check_template(
                    global::System.Nullable<int> field_id, 
                    string table_name, 
                    string database_name, 
                    string field_name, 
                    string scale, 
                    string row_nr_trend, 
                    string cat_nr_trend, 
                    global::System.Nullable<int> stdev_corr_percent, 
                    global::System.Nullable<int> considered_history, 
                    global::System.Nullable<long> row_nr, 
                    global::System.Nullable<long> cat_nr, 
                    global::System.Nullable<double> avg_row_nr, 
                    global::System.Nullable<double> stdev_row_nr, 
                    global::System.Nullable<bool> row_nr_trend_check_ok, 
                    global::System.Nullable<bool> cat_nr_trend_check_ok, 
                    global::System.Nullable<bool> stdev_check_ok, 
                    ref global::System.Nullable<bool> user_defined_check_ok_out) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[2]));
            if ((field_id.HasValue == true)) {
                command.Parameters[1].Value = ((int)(field_id.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((table_name == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(table_name));
            }
            if ((database_name == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(database_name));
            }
            if ((field_name == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(field_name));
            }
            if ((scale == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(scale));
            }
            if ((row_nr_trend == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(row_nr_trend));
            }
            if ((cat_nr_trend == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(cat_nr_trend));
            }
            if ((stdev_corr_percent.HasValue == true)) {
                command.Parameters[8].Value = ((int)(stdev_corr_percent.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((considered_history.HasValue == true)) {
                command.Parameters[9].Value = ((int)(considered_history.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((row_nr.HasValue == true)) {
                command.Parameters[10].Value = ((long)(row_nr.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((cat_nr.HasValue == true)) {
                command.Parameters[11].Value = ((long)(cat_nr.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((avg_row_nr.HasValue == true)) {
                command.Parameters[12].Value = ((double)(avg_row_nr.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((stdev_row_nr.HasValue == true)) {
                command.Parameters[13].Value = ((double)(stdev_row_nr.Value));
            }
            else {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((row_nr_trend_check_ok.HasValue == true)) {
                command.Parameters[14].Value = ((bool)(row_nr_trend_check_ok.Value));
            }
            else {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((cat_nr_trend_check_ok.HasValue == true)) {
                command.Parameters[15].Value = ((bool)(cat_nr_trend_check_ok.Value));
            }
            else {
                command.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((stdev_check_ok.HasValue == true)) {
                command.Parameters[16].Value = ((bool)(stdev_check_ok.Value));
            }
            else {
                command.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((user_defined_check_ok_out.HasValue == true)) {
                command.Parameters[17].Value = ((bool)(user_defined_check_ok_out.Value));
            }
            else {
                command.Parameters[17].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[17].Value == null) 
                        || (command.Parameters[17].Value.GetType() == typeof(global::System.DBNull)))) {
                user_defined_check_ok_out = new global::System.Nullable<bool>();
            }
            else {
                user_defined_check_ok_out = new global::System.Nullable<bool>(((bool)(command.Parameters[17].Value)));
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int proc_dq_write_error_details(global::System.Nullable<int> batch_log_id, global::System.Nullable<int> field_id, global::System.Nullable<int> mssql_error_number, global::System.Nullable<int> mssql_error_severity, global::System.Nullable<int> mssql_error_state, string mssql_error_procedure, global::System.Nullable<int> mssql_error_line, string mssql_error_message) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[3]));
            if ((batch_log_id.HasValue == true)) {
                command.Parameters[1].Value = ((int)(batch_log_id.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((field_id.HasValue == true)) {
                command.Parameters[2].Value = ((int)(field_id.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_number.HasValue == true)) {
                command.Parameters[3].Value = ((int)(mssql_error_number.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_severity.HasValue == true)) {
                command.Parameters[4].Value = ((int)(mssql_error_severity.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_state.HasValue == true)) {
                command.Parameters[5].Value = ((int)(mssql_error_state.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_procedure == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(mssql_error_procedure));
            }
            if ((mssql_error_line.HasValue == true)) {
                command.Parameters[7].Value = ((int)(mssql_error_line.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((mssql_error_message == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(mssql_error_message));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<bool> func_is_cat_nr_trend_check_ok(global::System.Nullable<int> field_id, string cat_nr_trend, global::System.Nullable<long> last_cat_nr, global::System.Nullable<long> cat_nr) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[4]));
            if ((field_id.HasValue == true)) {
                command.Parameters[1].Value = ((int)(field_id.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((cat_nr_trend == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(cat_nr_trend));
            }
            if ((last_cat_nr.HasValue == true)) {
                command.Parameters[3].Value = ((long)(last_cat_nr.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((cat_nr.HasValue == true)) {
                command.Parameters[4].Value = ((long)(cat_nr.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            try {
                command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[0].Value == null) 
                        || (command.Parameters[0].Value.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<bool>();
            }
            else {
                return new global::System.Nullable<bool>(((bool)(command.Parameters[0].Value)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<bool> func_is_row_nr_trend_check_ok(global::System.Nullable<int> field_id, string row_nr_trend, global::System.Nullable<long> last_row_nr, global::System.Nullable<long> row_nr) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[5]));
            if ((field_id.HasValue == true)) {
                command.Parameters[1].Value = ((int)(field_id.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((row_nr_trend == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(row_nr_trend));
            }
            if ((last_row_nr.HasValue == true)) {
                command.Parameters[3].Value = ((long)(last_row_nr.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((row_nr.HasValue == true)) {
                command.Parameters[4].Value = ((long)(row_nr.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            try {
                command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[0].Value == null) 
                        || (command.Parameters[0].Value.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<bool>();
            }
            else {
                return new global::System.Nullable<bool>(((bool)(command.Parameters[0].Value)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<bool> func_is_stdev_check_ok(global::System.Nullable<long> row_nr, global::System.Nullable<double> avg_row_nr, global::System.Nullable<double> stdev_row_nr, global::System.Nullable<int> stdev_corr_percent) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[6]));
            if ((row_nr.HasValue == true)) {
                command.Parameters[1].Value = ((long)(row_nr.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((avg_row_nr.HasValue == true)) {
                command.Parameters[2].Value = ((double)(avg_row_nr.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((stdev_row_nr.HasValue == true)) {
                command.Parameters[3].Value = ((double)(stdev_row_nr.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((stdev_corr_percent.HasValue == true)) {
                command.Parameters[4].Value = ((int)(stdev_corr_percent.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            try {
                command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[0].Value == null) 
                        || (command.Parameters[0].Value.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<bool>();
            }
            else {
                return new global::System.Nullable<bool>(((bool)(command.Parameters[0].Value)));
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private DQ_BATCH_ERROR_DETAILSTableAdapter _dQ_BATCH_ERROR_DETAILSTableAdapter;
        
        private DQ_BATCH_LOGTableAdapter _dQ_BATCH_LOGTableAdapter;
        
        private DQ_BATCHESTableAdapter _dQ_BATCHESTableAdapter;
        
        private DQ_BATCHES_FIELDSTableAdapter _dQ_BATCHES_FIELDSTableAdapter;
        
        private DQ_CHECK_RESULTSTableAdapter _dQ_CHECK_RESULTSTableAdapter;
        
        private DQ_DATABASESTableAdapter _dQ_DATABASESTableAdapter;
        
        private DQ_FIELDSTableAdapter _dQ_FIELDSTableAdapter;
        
        private DQ_TABLESTableAdapter _dQ_TABLESTableAdapter;
        
        private mylogTableAdapter _mylogTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DQ_BATCH_ERROR_DETAILSTableAdapter DQ_BATCH_ERROR_DETAILSTableAdapter {
            get {
                return this._dQ_BATCH_ERROR_DETAILSTableAdapter;
            }
            set {
                if (((this._dQ_BATCH_ERROR_DETAILSTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._dQ_BATCH_ERROR_DETAILSTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                            "tring.");
                }
                this._dQ_BATCH_ERROR_DETAILSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DQ_BATCH_LOGTableAdapter DQ_BATCH_LOGTableAdapter {
            get {
                return this._dQ_BATCH_LOGTableAdapter;
            }
            set {
                if (((this._dQ_BATCH_LOGTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._dQ_BATCH_LOGTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                            "tring.");
                }
                this._dQ_BATCH_LOGTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DQ_BATCHESTableAdapter DQ_BATCHESTableAdapter {
            get {
                return this._dQ_BATCHESTableAdapter;
            }
            set {
                if (((this._dQ_BATCHESTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._dQ_BATCHESTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                            "tring.");
                }
                this._dQ_BATCHESTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DQ_BATCHES_FIELDSTableAdapter DQ_BATCHES_FIELDSTableAdapter {
            get {
                return this._dQ_BATCHES_FIELDSTableAdapter;
            }
            set {
                if (((this._dQ_BATCHES_FIELDSTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._dQ_BATCHES_FIELDSTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                            "tring.");
                }
                this._dQ_BATCHES_FIELDSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DQ_CHECK_RESULTSTableAdapter DQ_CHECK_RESULTSTableAdapter {
            get {
                return this._dQ_CHECK_RESULTSTableAdapter;
            }
            set {
                if (((this._dQ_CHECK_RESULTSTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._dQ_CHECK_RESULTSTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                            "tring.");
                }
                this._dQ_CHECK_RESULTSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DQ_DATABASESTableAdapter DQ_DATABASESTableAdapter {
            get {
                return this._dQ_DATABASESTableAdapter;
            }
            set {
                if (((this._dQ_DATABASESTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._dQ_DATABASESTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                            "tring.");
                }
                this._dQ_DATABASESTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DQ_FIELDSTableAdapter DQ_FIELDSTableAdapter {
            get {
                return this._dQ_FIELDSTableAdapter;
            }
            set {
                if (((this._dQ_FIELDSTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._dQ_FIELDSTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                            "tring.");
                }
                this._dQ_FIELDSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DQ_TABLESTableAdapter DQ_TABLESTableAdapter {
            get {
                return this._dQ_TABLESTableAdapter;
            }
            set {
                if (((this._dQ_TABLESTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._dQ_TABLESTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                            "tring.");
                }
                this._dQ_TABLESTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public mylogTableAdapter mylogTableAdapter {
            get {
                return this._mylogTableAdapter;
            }
            set {
                if (((this._mylogTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._mylogTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                            "tring.");
                }
                this._mylogTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._dQ_BATCH_ERROR_DETAILSTableAdapter != null) 
                            && (this._dQ_BATCH_ERROR_DETAILSTableAdapter.Connection != null))) {
                    return this._dQ_BATCH_ERROR_DETAILSTableAdapter.Connection;
                }
                if (((this._dQ_BATCH_LOGTableAdapter != null) 
                            && (this._dQ_BATCH_LOGTableAdapter.Connection != null))) {
                    return this._dQ_BATCH_LOGTableAdapter.Connection;
                }
                if (((this._dQ_BATCHESTableAdapter != null) 
                            && (this._dQ_BATCHESTableAdapter.Connection != null))) {
                    return this._dQ_BATCHESTableAdapter.Connection;
                }
                if (((this._dQ_BATCHES_FIELDSTableAdapter != null) 
                            && (this._dQ_BATCHES_FIELDSTableAdapter.Connection != null))) {
                    return this._dQ_BATCHES_FIELDSTableAdapter.Connection;
                }
                if (((this._dQ_CHECK_RESULTSTableAdapter != null) 
                            && (this._dQ_CHECK_RESULTSTableAdapter.Connection != null))) {
                    return this._dQ_CHECK_RESULTSTableAdapter.Connection;
                }
                if (((this._dQ_DATABASESTableAdapter != null) 
                            && (this._dQ_DATABASESTableAdapter.Connection != null))) {
                    return this._dQ_DATABASESTableAdapter.Connection;
                }
                if (((this._dQ_FIELDSTableAdapter != null) 
                            && (this._dQ_FIELDSTableAdapter.Connection != null))) {
                    return this._dQ_FIELDSTableAdapter.Connection;
                }
                if (((this._dQ_TABLESTableAdapter != null) 
                            && (this._dQ_TABLESTableAdapter.Connection != null))) {
                    return this._dQ_TABLESTableAdapter.Connection;
                }
                if (((this._mylogTableAdapter != null) 
                            && (this._mylogTableAdapter.Connection != null))) {
                    return this._mylogTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._dQ_BATCH_ERROR_DETAILSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dQ_BATCH_LOGTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dQ_BATCHESTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dQ_BATCHES_FIELDSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dQ_CHECK_RESULTSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dQ_DATABASESTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dQ_FIELDSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dQ_TABLESTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mylogTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(AF_TESTDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._dQ_DATABASESTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DQ_DATABASES.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dQ_DATABASESTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dQ_TABLESTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DQ_TABLES.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dQ_TABLESTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dQ_FIELDSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DQ_FIELDS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dQ_FIELDSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dQ_BATCHESTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DQ_BATCHES.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dQ_BATCHESTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mylogTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.mylog.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mylogTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dQ_BATCHES_FIELDSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DQ_BATCHES_FIELDS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dQ_BATCHES_FIELDSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dQ_BATCH_LOGTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DQ_BATCH_LOG.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dQ_BATCH_LOGTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dQ_BATCH_ERROR_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DQ_BATCH_ERROR_DETAILS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dQ_BATCH_ERROR_DETAILSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dQ_CHECK_RESULTSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DQ_CHECK_RESULTS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dQ_CHECK_RESULTSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(AF_TESTDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._dQ_DATABASESTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DQ_DATABASES.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dQ_DATABASESTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dQ_TABLESTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DQ_TABLES.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dQ_TABLESTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dQ_FIELDSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DQ_FIELDS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dQ_FIELDSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dQ_BATCHESTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DQ_BATCHES.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dQ_BATCHESTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mylogTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.mylog.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mylogTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dQ_BATCHES_FIELDSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DQ_BATCHES_FIELDS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dQ_BATCHES_FIELDSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dQ_BATCH_LOGTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DQ_BATCH_LOG.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dQ_BATCH_LOGTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dQ_BATCH_ERROR_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DQ_BATCH_ERROR_DETAILS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dQ_BATCH_ERROR_DETAILSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dQ_CHECK_RESULTSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DQ_CHECK_RESULTS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dQ_CHECK_RESULTSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(AF_TESTDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._dQ_CHECK_RESULTSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DQ_CHECK_RESULTS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dQ_CHECK_RESULTSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dQ_BATCH_ERROR_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DQ_BATCH_ERROR_DETAILS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dQ_BATCH_ERROR_DETAILSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dQ_BATCH_LOGTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DQ_BATCH_LOG.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dQ_BATCH_LOGTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dQ_BATCHES_FIELDSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DQ_BATCHES_FIELDS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dQ_BATCHES_FIELDSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mylogTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.mylog.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mylogTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dQ_BATCHESTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DQ_BATCHES.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dQ_BATCHESTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dQ_FIELDSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DQ_FIELDS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dQ_FIELDSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dQ_TABLESTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DQ_TABLES.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dQ_TABLESTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dQ_DATABASESTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DQ_DATABASES.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dQ_DATABASESTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(AF_TESTDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Closed) 
                        == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._dQ_BATCH_ERROR_DETAILSTableAdapter != null)) {
                    revertConnections.Add(this._dQ_BATCH_ERROR_DETAILSTableAdapter, this._dQ_BATCH_ERROR_DETAILSTableAdapter.Connection);
                    this._dQ_BATCH_ERROR_DETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dQ_BATCH_ERROR_DETAILSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dQ_BATCH_ERROR_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dQ_BATCH_ERROR_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dQ_BATCH_ERROR_DETAILSTableAdapter.Adapter);
                    }
                }
                if ((this._dQ_BATCH_LOGTableAdapter != null)) {
                    revertConnections.Add(this._dQ_BATCH_LOGTableAdapter, this._dQ_BATCH_LOGTableAdapter.Connection);
                    this._dQ_BATCH_LOGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dQ_BATCH_LOGTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dQ_BATCH_LOGTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dQ_BATCH_LOGTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dQ_BATCH_LOGTableAdapter.Adapter);
                    }
                }
                if ((this._dQ_BATCHESTableAdapter != null)) {
                    revertConnections.Add(this._dQ_BATCHESTableAdapter, this._dQ_BATCHESTableAdapter.Connection);
                    this._dQ_BATCHESTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dQ_BATCHESTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dQ_BATCHESTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dQ_BATCHESTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dQ_BATCHESTableAdapter.Adapter);
                    }
                }
                if ((this._dQ_BATCHES_FIELDSTableAdapter != null)) {
                    revertConnections.Add(this._dQ_BATCHES_FIELDSTableAdapter, this._dQ_BATCHES_FIELDSTableAdapter.Connection);
                    this._dQ_BATCHES_FIELDSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dQ_BATCHES_FIELDSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dQ_BATCHES_FIELDSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dQ_BATCHES_FIELDSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dQ_BATCHES_FIELDSTableAdapter.Adapter);
                    }
                }
                if ((this._dQ_CHECK_RESULTSTableAdapter != null)) {
                    revertConnections.Add(this._dQ_CHECK_RESULTSTableAdapter, this._dQ_CHECK_RESULTSTableAdapter.Connection);
                    this._dQ_CHECK_RESULTSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dQ_CHECK_RESULTSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dQ_CHECK_RESULTSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dQ_CHECK_RESULTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dQ_CHECK_RESULTSTableAdapter.Adapter);
                    }
                }
                if ((this._dQ_DATABASESTableAdapter != null)) {
                    revertConnections.Add(this._dQ_DATABASESTableAdapter, this._dQ_DATABASESTableAdapter.Connection);
                    this._dQ_DATABASESTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dQ_DATABASESTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dQ_DATABASESTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dQ_DATABASESTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dQ_DATABASESTableAdapter.Adapter);
                    }
                }
                if ((this._dQ_FIELDSTableAdapter != null)) {
                    revertConnections.Add(this._dQ_FIELDSTableAdapter, this._dQ_FIELDSTableAdapter.Connection);
                    this._dQ_FIELDSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dQ_FIELDSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dQ_FIELDSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dQ_FIELDSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dQ_FIELDSTableAdapter.Adapter);
                    }
                }
                if ((this._dQ_TABLESTableAdapter != null)) {
                    revertConnections.Add(this._dQ_TABLESTableAdapter, this._dQ_TABLESTableAdapter.Connection);
                    this._dQ_TABLESTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dQ_TABLESTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dQ_TABLESTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dQ_TABLESTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dQ_TABLESTableAdapter.Adapter);
                    }
                }
                if ((this._mylogTableAdapter != null)) {
                    revertConnections.Add(this._mylogTableAdapter, this._mylogTableAdapter.Connection);
                    this._mylogTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._mylogTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._mylogTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mylogTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mylogTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._dQ_BATCH_ERROR_DETAILSTableAdapter != null)) {
                    this._dQ_BATCH_ERROR_DETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dQ_BATCH_ERROR_DETAILSTableAdapter]));
                    this._dQ_BATCH_ERROR_DETAILSTableAdapter.Transaction = null;
                }
                if ((this._dQ_BATCH_LOGTableAdapter != null)) {
                    this._dQ_BATCH_LOGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dQ_BATCH_LOGTableAdapter]));
                    this._dQ_BATCH_LOGTableAdapter.Transaction = null;
                }
                if ((this._dQ_BATCHESTableAdapter != null)) {
                    this._dQ_BATCHESTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dQ_BATCHESTableAdapter]));
                    this._dQ_BATCHESTableAdapter.Transaction = null;
                }
                if ((this._dQ_BATCHES_FIELDSTableAdapter != null)) {
                    this._dQ_BATCHES_FIELDSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dQ_BATCHES_FIELDSTableAdapter]));
                    this._dQ_BATCHES_FIELDSTableAdapter.Transaction = null;
                }
                if ((this._dQ_CHECK_RESULTSTableAdapter != null)) {
                    this._dQ_CHECK_RESULTSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dQ_CHECK_RESULTSTableAdapter]));
                    this._dQ_CHECK_RESULTSTableAdapter.Transaction = null;
                }
                if ((this._dQ_DATABASESTableAdapter != null)) {
                    this._dQ_DATABASESTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dQ_DATABASESTableAdapter]));
                    this._dQ_DATABASESTableAdapter.Transaction = null;
                }
                if ((this._dQ_FIELDSTableAdapter != null)) {
                    this._dQ_FIELDSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dQ_FIELDSTableAdapter]));
                    this._dQ_FIELDSTableAdapter.Transaction = null;
                }
                if ((this._dQ_TABLESTableAdapter != null)) {
                    this._dQ_TABLESTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dQ_TABLESTableAdapter]));
                    this._dQ_TABLESTableAdapter.Transaction = null;
                }
                if ((this._mylogTableAdapter != null)) {
                    this._mylogTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._mylogTableAdapter]));
                    this._mylogTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591